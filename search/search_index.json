{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dotfiles","text":"<p>Easily manage and synchronize your dotfiles across multiple environments with the Dotfiles project, streamlining your development setup and CI/CD pipeline.</p> <ul> <li>Documentation: https://dotfiles.entelecheia.ai</li> <li>GitHub: https://github.com/entelecheia/dotfiles</li> </ul> <p>The Dotfiles project offers a comprehensive solution for managing and synchronizing your dotfiles across various environments, including local development, CI/CD pipelines, and production systems. With this tool, you can effortlessly maintain a consistent development environment, simplifying collaboration and reducing the time spent on setting up new machines. The Dotfiles project uses the Chezmoi framework, providing a secure and flexible way to manage your configuration files. The project also includes support for additional integrations, such as Docker, GitHub repositories, and password management tools, further enhancing your development experience. Get started with the Dotfiles project today and enjoy a seamless, hassle-free configuration management process.</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>The following guide will walk you through the process of installing and initializing the Dotfiles project on your machine. This will help you set up a consistent development environment across different systems, simplifying your workflow and making it easier to collaborate with others.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Before proceeding with the installation, ensure that your system has the following tools:</p> <ul> <li><code>wget</code> or <code>curl</code>: To fetch the installation script from the internet.</li> <li><code>git</code>: To clone the Dotfiles repository.</li> </ul> <p>Most Linux distributions come with these tools pre-installed. If not, you can install them using your package manager.</p>"},{"location":"#installing-dotfiles","title":"Installing Dotfiles","text":"<p>To install the Dotfiles project on your machine, you need to fetch the installation script and execute it. You can do this using either <code>wget</code> or <code>curl</code>:</p>"},{"location":"#using-wget","title":"Using <code>wget</code>:","text":"<pre><code>sh -c \"$(wget -qO- https://dotfiles.entelecheia.ai/install)\"\n</code></pre>"},{"location":"#using-curl","title":"Using <code>curl</code>:","text":"<pre><code>sh -c \"$(curl -fsSL https://dotfiles.entelecheia.ai/install)\"\n</code></pre> <p>Running the above command will download the installation script and execute it, cloning the Dotfiles repository to your machine and setting up the necessary configurations.</p> <p> For unattended installations such as in a dockerfile, you can use the environment variables to initialize the dotfiles automatically. For example:</p> <pre><code># install dotfiles\nARG USER_FULLNAME=\"John Doe\"\nARG USER_EMAIL=\"john.doe@email.com\"\nARG GITHUB_USERNAME=\"john-doe\"\nARG SYSTEM_HOSTNANE=\"devcon-arm64\"\n\nENV USER_FULLNAME=$USER_FULLNAME\nENV USER_EMAIL=$USER_EMAIL\nENV GITHUB_USERNAME=$GITHUB_USERNAME\nENV SYSTEM_HOSTNAME=$SYSTEM_HOSTNAME\nENV WORKSPACE_LOCATION=\"/\"\nENV DOTFILES_APPLY_ROOTMOI=0\nENV REMOTE_CONTAINERS=1\n\nRUN sh -c \"$(wget -qO- https://dotfiles.entelecheia.ai/install)\"\n\nCMD [\"zsh\"]\n</code></pre> <p>Or you can provide the environment variables in the command line:</p> <pre><code>USER_FULLNAME=\"John Doe\" \\\nUSER_EMAIL=\"john.doe@email.com\" \\\nGITHUB_USERNAME=\"john-doe\" \\\nSYSTEM_HOSTNAME=\"devcon-arm64\" \\\nWORKSPACE_LOCATION=\"/\" \\\nDOTFILES_APPLY_ROOTMOI=0 \\\nREMOTE_CONTAINERS=1 \\\nsh -c \"$(wget -qO- https://dotfiles.entelecheia.ai/install)\"\n</code></pre>"},{"location":"#initializing-dotfiles","title":"Initializing Dotfiles","text":"<p>After the installation, the initialization process will start automatically. This step applies the configurations defined in your dotfiles to your system, ensuring a consistent development environment.</p> <p></p> <p>If you need to re-initialize your dotfiles manually, you can run the following command:</p> <pre><code>dotu init\n</code></pre> <p>This command will update your system with the latest configurations from your dotfiles, keeping your environment up-to-date and in sync with any changes you've made.</p> <p>Once the initialization process is complete, you can start using your newly configured development environment. Feel free to explore the available configurations and customize them to your preferences.</p>"},{"location":"#repositories-and-repository-templates-for-setting-up-your-own-dotfiles","title":"Repositories and repository templates for setting up your own dotfiles","text":"<ul> <li>dotdrop-files</li> <li>password-store</li> <li>passage-store</li> </ul>"},{"location":"#installing-the-font-on-windows","title":"Installing the font on Windows","text":"<ol> <li>Download Fira Code Regular Nerd Font Complete.</li> <li>Open the downloaded file and click Install.</li> <li>Restart Windows Terminal or VS Code.</li> </ol>"},{"location":"#configuring-the-font-in-vs-code","title":"Configuring the font in VS Code","text":"<ol> <li>Open settings by pressing Ctrl/Cmd+,.</li> <li>Change the font family to FiraCode Nerd Font in Terminal \u203a Integrated: Font Family.</li> </ol>"},{"location":"#configuring-the-font-in-windows-terminal","title":"Configuring the font in Windows Terminal","text":"<ol> <li>On Windows Terminal, press Ctrl+, to open the settings.</li> <li>Go to Profiles -&gt; Defaults in the left panel. Then, go to Additional settings -&gt; Appearance.</li> <li>At Text -&gt; Font face, enable the Show all fonts option and select FiraCode Nerd Font. Like below:</li> </ol>"},{"location":"#changelog","title":"Changelog","text":"<p>See the CHANGELOG for more information.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please see the contributing guidelines for more information.</p>"},{"location":"#license","title":"License","text":"<p>This project is released under the MIT License.</p> <p>Check out the usage section for further information.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"bootstrap/","title":"Bootstrap Scripts","text":"<p>In the process of setting up dotfiles, bootstrap scripts are used to automate the installation process. These scripts are invoked by Chezmoi in a specific order due to the numeric prefixes in their filenames. This allows for a complex bootstrapping process to be broken down into manageable, discrete steps.</p> <p>These scripts help to automate the installation process and run initial configurations. These scripts are invoked in the <code>run_once_before_xx</code> and <code>run_once_after_xx</code> sequence in the <code>.chezmoiscripts</code> directory.</p>"},{"location":"bootstrap/#description-of-scripts","title":"Description of Scripts","text":"<p>Below is the explanation of each script that we have in our list.</p> <ul> <li> <p><code>run_once_before_00-install-prerequisites</code>: This script checks the OS and if it is Linux and the user has sudo privileges, it installs the apt prerequisites.</p> </li> <li> <p><code>run_once_after_00-install-packages</code>: This script installs packages for both Linux and MacOS. The packages are mentioned in <code>.chezmoidata.yaml</code> file.</p> </li> <li> <p><code>run_once_after_10-initialize-zsh</code>: Initializes ZSH shell by sourcing the <code>dotfiles-initialize-zsh.tmpl</code> script from the local bin directory.</p> </li> <li> <p><code>run_once_after_20-apply-rootmoi</code>: On Linux, if the user has sudo privileges, applies rootmoi.</p> </li> <li> <p><code>run_once_after_30-install-packages-others</code>: Installs various other script packages, python packages and snap packages.</p> </li> <li> <p><code>run_once_after_40-system-configuration</code>: Handles a lot of system configuration such as authenticating with GitHub, restoring dotfiles, setting up SSH, AGE, and GPG keys, initializing password store, Docker Hub login and backing up dotfiles.</p> </li> <li> <p><code>run_once_after_50-setup-workspace</code>: Sets up the workspace and clones the necessary repositories.</p> </li> <li> <p><code>run_once_after_90-install-brewfile</code>: If the system is MacOS, it installs Homebrew from the bundle.</p> </li> <li> <p><code>run_once_after_99-final-message</code>: This script executes at the end of the installation to print a final message.</p> </li> </ul>"},{"location":"features/","title":"Features","text":"<p>The Dotfiles project offers an extensive set of features to help you manage and configure your development environment with ease. These features are designed to simplify your workflow, improve productivity, and ensure consistency across different systems. Here are some of the key features of the Dotfiles project:</p> <ol> <li> <p>Personalized configuration: Dotfiles allows you to define various personal settings, such as your name, email address, preferred text editor, and GitHub username. This ensures that your development environment is tailored to your preferences and requirements.</p> </li> <li> <p>Cross-platform support: Dotfiles supports multiple platforms, including Linux, macOS, and Windows. This enables you to maintain a consistent development environment across various operating systems.</p> </li> <li> <p>Version control integration: Dotfiles integrates with Git for version control, making it easy to track changes, collaborate with others, and revert to previous versions of your configuration files when necessary.</p> </li> <li> <p>Flexible configuration management: Dotfiles uses the <code>chezmoi</code> tool to manage your configuration files, which allows you to easily synchronize your configurations across multiple devices and keep them up to date.</p> </li> <li> <p>Extensive tool support: Dotfiles includes configurations for a wide range of development tools, such as text editors, terminals, version control systems, and more. This ensures that you have access to your preferred tools regardless of the system you're working on.</p> </li> <li> <p>Modular structure: The Dotfiles project features a modular structure, making it easy to manage and maintain your configuration files. You can easily add, remove, or modify individual components without affecting the rest of your configuration.</p> </li> <li> <p>Customizable workspace setup: Dotfiles allows you to configure your workspace, including specifying the location, project directory, and reference directory. This helps you maintain an organized and efficient development environment.</p> </li> <li> <p>Automated installation and initialization: The Dotfiles project streamlines the installation and initialization process using a single command. This makes it easy to set up your development environment quickly and consistently across different devices.</p> </li> <li> <p>Comprehensive documentation: The Dotfiles project provides extensive documentation to help you understand and customize your development environment. This makes it easy to get started and tailor your setup to your needs.</p> </li> </ol>"},{"location":"packages/","title":"Packages","text":"<p>Matrix of packages to install with different package managers.</p> name apt brew python snap script 1password-cli \u2714\ufe0f \u2714\ufe0f age \u2714\ufe0f \u2714\ufe0f apt-transport-https \u2714\ufe0f autorestic \u2714\ufe0f \u2714\ufe0f bazel \u2714\ufe0f build-essential \u2714\ufe0f code \u2714\ufe0f code-cli \u2714\ufe0f commitizen \u2714\ufe0f containerd.io \u2714\ufe0f copier \u2714\ufe0f \u2714\ufe0f coreutils \u2714\ufe0f direnv \u2714\ufe0f \u2714\ufe0f docker-ce \u2714\ufe0f docker-ce-cli \u2714\ufe0f docker-compose-plugin \u2714\ufe0f doppler \u2714\ufe0f dopplerhq/cli/doppler \u2714\ufe0f dotdrop \u2714\ufe0f \u2714\ufe0f file \u2714\ufe0f findutils \u2714\ufe0f font-fira-code \u2714\ufe0f font-fira-code-nerd-font \u2714\ufe0f fzf \u2714\ufe0f \u2714\ufe0f gh \u2714\ufe0f \u2714\ufe0f git-sizer \u2714\ufe0f \u2714\ufe0f git-workspace \u2714\ufe0f gitmojify \u2714\ufe0f gnupg \u2714\ufe0f go \u2714\ufe0f \u2714\ufe0f go-task \u2714\ufe0f \u2714\ufe0f google-perftools \u2714\ufe0f gpa \u2714\ufe0f gpg-suite \ufe0f\u2714\ufe0f helm \u2714\ufe0f \u2714\ufe0f jq \u2714\ufe0f \u2714\ufe0f locales \u2714\ufe0f locales-all \u2714\ufe0f lsb-release \u2714\ufe0f microk8s \u2714\ufe0f \u2714\ufe0f mypy \u2714\ufe0f ngrok \u2714\ufe0f node \u2714\ufe0f openssh-server \u2714\ufe0f pass \u2714\ufe0f \u2714\ufe0f pinentry-curses \u2714\ufe0f pinentry-mac \u2714\ufe0f pip \u2714\ufe0f pipx \u2714\ufe0f \u2714\ufe0f poethepoet \u2714\ufe0f \u2714\ufe0f poetry \u2714\ufe0f pre-commit \u2714\ufe0f procps \u2714\ufe0f python3-dev \u2714\ufe0f python3-pip \u2714\ufe0f python3-setuptools \u2714\ufe0f python3-testresources \u2714\ufe0f python3-venv \u2714\ufe0f restic \u2714\ufe0f rust sdkman \ufe0f\u2714\ufe0f seahorse \u2714\ufe0f serviceman \u2714\ufe0f setuptools \u2714\ufe0f snapd \u2714\ufe0f sops \u2714\ufe0f stow \u2714\ufe0f \u2714\ufe0f tmux \u2714\ufe0f \u2714\ufe0f tree \u2714\ufe0f \u2714\ufe0f tzdata \u2714\ufe0f unzip \u2714\ufe0f \u2714\ufe0f vim \u2714\ufe0f webi \u2714\ufe0f xclip \u2714\ufe0f yq \u2714\ufe0f \u2714\ufe0f zip \u2714\ufe0f zsh \u2714\ufe0f \u2714\ufe0f"},{"location":"packages/#configuration","title":"Configuration","text":"<pre><code>DOTFILES_VERSION: 0.40.0\npackages:\n  - name: 1password-cli\n    apt: true\n    brewcask: true\n    keyring_file: 1password-archive-keyring.gpg\n    keyring_url: https://downloads.1password.com/linux/keys/1password.asc\n    source_list_file: 1password.list\n    source_list_line: \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/amd64 stable main\"\n    scope: optional\n    allow_upgrade: true\n  - name: age\n    brew: true\n    scope: minimal\n  - name: apt-transport-https\n    apt: true\n    scope: minimal\n  - name: autorestic\n    brew: true\n    script: true\n    script_cmd: install-autorestic\n    scope: optional\n  - name: bazel\n    apt: true\n    keyring_file: bazel-archive-keyring.gpg\n    keyring_url: https://bazel.build/bazel-release.pub.gpg\n    source_list_file: bazel.list\n    source_list_line: \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/bazel-archive-keyring.gpg] https://storage.googleapis.com/bazel-apt stable jdk1.8\"\n    scope: full\n  - name: build-essential\n    apt: true\n    scope: minimal\n  - name: bzip2\n    apt: true\n    brew: true\n    scope: minimal\n  - name: cloudflared\n    script: true\n    script_cmd: install-cloudflared\n    scope: optional\n  - name: code\n    apt: true\n    keyring_file: packages.microsoft.gpg\n    keyring_url: https://packages.microsoft.com/keys/microsoft.asc\n    source_list_file: vscode.list\n    source_list_line: \"deb [arch=amd64,arm64,armhf signed-by=/usr/share/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main\"\n    scope: optional\n  - name: code-cli\n    brew: true\n    scope: optional\n  - name: codecov-cli\n    pipx: true\n    check_installed: command -v codecovcli &amp;&gt;/dev/null\n    scope: optional\n  - name: commitizen\n    brew: false\n    pipx: true\n    check_installed: command -v cz &amp;&gt;/dev/null\n    scope: optional\n  - name: containerd.io\n    apt: true\n    scope: system\n  - name: coreutils\n    brew: true\n    scope: minimal\n  - name: copier\n    brew: false\n    pipx: true\n    scope: full\n    allow_upgrade: true\n  - name: cz-conventional-gitmoji\n    pipx: true\n    check_installed: command -v gitmojify &amp;&gt;/dev/null\n    scope: optional\n  - name: direnv\n    apt: true\n    brew: true\n    scope: minimal\n  - name: docker-ce\n    apt: true\n    apt_remove: docker\n    keyring_file: docker.gpg\n    keyring_url: https://download.docker.com/linux/ubuntu/gpg\n    source_list_file: docker.list\n    source_list_line: \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n    scope: system\n  - name: docker-ce-cli\n    apt: true\n    scope: system\n  - name: docker-compose-plugin\n    apt: true\n    scope: system\n  - name: doppler\n    apt: true\n    brew: true\n    keyring_file: doppler-archive-keyring.gpg\n    keyring_url: https://packages.doppler.com/public/cli/gpg.DE2A7741A397C129.key\n    source_list_file: doppler-cli.list\n    source_list_line: \"deb [signed-by=/usr/share/keyrings/doppler-archive-keyring.gpg] https://packages.doppler.com/public/cli/deb/debian any-version main\"\n    scope: optional\n  - name: dotdrop\n    brew: false\n    pipx: true\n    scope: optional\n    allow_upgrade: true\n  - name: fig\n    brew: true\n    scope: optional\n  - name: file\n    apt: true\n    scope: minimal\n  - name: findutils\n    brew: true\n    scope: minimal\n  - name: font-fira-code\n    brewcask: true\n    scope: minimal\n  - name: font-fira-code-nerd-font\n    brewcask: true\n    scope: minimal\n  - name: fzf\n    apt: true\n    brew: true\n    scope: minimal\n    allow_upgrade: true\n  - name: gh\n    apt: true\n    brew: true\n    keyring_file: githubcli-archive-keyring.gpg\n    keyring_url: https://cli.github.com/packages/githubcli-archive-keyring.gpg\n    source_list_file: github-cli.list\n    source_list_line: \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\"\n    scope: minimal\n    allow_upgrade: true\n  - name: git\n    brew: true\n    scope: minimal\n    allow_upgrade: true\n  - name: git-lfs\n    apt: true\n    brew: true\n    scope: minimal\n    repository_script: https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh\n    source_list_file: github_git-lfs.list\n    allow_upgrade: true\n  - name: git-sizer\n    apt: true\n    brew: true\n    scope: minimal\n  - name: git-workspace\n    brew: true\n    scope: optional\n  - name: google-cloud-cli\n    apt: true\n    keyring_file: cloud.google.gpg\n    keyring_url: https://packages.cloud.google.com/apt/doc/apt-key.gpg\n    source_list_file: google-cloud-sdk.list\n    source_list_line: \"deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main\"\n    scope: optional\n  - name: google-perftools\n    apt: true\n    scope: full\n  - name: gnupg\n    brew: true\n    scope: minimal\n  - name: go\n    brew: true\n    script: true\n    script_cmd: install-go\n    current_version: \"$(go version | awk '{print $3}')\"\n    latest_version: \"$(curl -s 'https://go.dev/VERSION?m=text' | head -n 1)\"\n    scope: minimal\n    allow_upgrade: true\n  - name: go-age\n    script: true\n    script_cmd: go install filippo.io/age/cmd/...@latest\n    script_prereqs: \"source ${HOME}/.config/shrc/00-dotfiles-export\"\n    check_prereqs: \"command -v go &amp;&gt; /dev/null\"\n    check_installed: command -v age &amp;&gt;/dev/null\n    current_version: \"age --version | cut -d' ' -f2\"\n    latest_version: $(curl -s https://api.github.com/repos/FiloSottile/age/releases/latest | grep tag_name | cut -d '\"' -f4)\n    scope: minimal\n  - name: go-sops\n    script: true\n    script_cmd: go install go.mozilla.org/sops/v3/cmd/sops@latest\n    script_prereqs: \"source ${HOME}/.config/shrc/00-dotfiles-export\"\n    check_prereqs: \"command -v go &amp;&gt; /dev/null\"\n    check_installed: command -v sops &amp;&gt;/dev/null\n    current_version: \"sops --version | awk '{print $NF}'\"\n    latest_version: $(curl -s https://api.github.com/repos/mozilla/sops/releases/latest | grep 'tag_name' | cut -d'\"' -f4)\n    scope: optional\n  - name: go-task\n    brew: true\n    script: true\n    script_cmd: install-go-task\n    check_installed: command -v task &amp;&gt;/dev/null\n    current_version: $(task --version | awk '{print $3}')\n    latest_version: $(curl -s https://api.github.com/repos/go-task/task/releases/latest | grep 'tag_name' | cut -d'\"' -f4)\n    scope: minimal\n    allow_upgrade: true\n  - name: gpa\n    apt: true\n    scope: gui\n  - name: gpg-suite\n    brewcask: true\n    scope: optional\n  - name: helm\n    apt: true\n    brew: true\n    keyring_file: helm.gpg\n    keyring_url: https://baltocdn.com/helm/signing.asc\n    source_list_file: helm-stable-debian.list\n    source_list_line: \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main\"\n    scope: optional\n  - name: hyfi\n    pipx: true\n    scope: optional\n    allow_upgrade: true\n  - name: inxi\n    apt: true\n    brew: true\n    scope: system\n  - name: jq\n    apt: true\n    brew: true\n    scope: minimal\n  - name: linux-generic-hwe-18.04\n    apt: true\n  - name: linux-generic-hwe-20.04\n    apt: true\n  - name: locales\n    apt: true\n    scope: minimal\n  - name: locales-all\n    apt: true\n    scope: minimal\n  - name: lsb-release\n    apt: true\n    scope: minimal\n  - name: microk8s\n    brew: true\n    snap: true\n    post_install: id -nG \"${USER}\" | grep -qw microk8s || sudo usermod -a -G microk8s \"${USER}\"\n    scope: optional\n  - name: mypy\n    pipx: true\n    check_installed: command -v dmypy &amp;&gt;/dev/null\n    scope: optional\n  - name: neofetch\n    apt: true\n    brew: true\n    scope: system\n  - name: ngrok\n    apt: true\n    gpg_key_file: ngrok.asc\n    gpg_key_url: https://ngrok-agent.s3.amazonaws.com/ngrok.asc\n    source_list_file: ngrok.list\n    source_list_line: \"deb https://ngrok-agent.s3.amazonaws.com buster main\"\n    scope: optional\n  - name: node\n    brew: true\n    scope: minimal\n  - name: nox\n    pipx: true\n    pipx_extra: nox-poetry\n    scope: optional\n  - name: nvidia-container-toolkit\n    apt: true\n    keyring_file: nvidia-container-toolkit-keyring.gpg\n    keyring_url: https://nvidia.github.io/libnvidia-container/gpgkey\n    source_list_file: nvidia-container-toolkit.list\n    # ISSUE: use ubuntu18.04 in the .list files for all later Ubuntu versions.\n    # ref: https://github.com/NVIDIA/nvidia-container-toolkit/issues/94\n    source_list_line: \"deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://nvidia.github.io/libnvidia-container/stable/$(. /etc/os-release;echo $ID'18.04/$(ARCH)') /\"\n    scope: system\n  - name: nvm\n    script: true\n    script_cmd: \"curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash\"\n    check_installed: \"[[ -f ${HOME}/.nvm/nvm.sh ]]\"\n    scope: minimal\n  - name: openai\n    pipx: true\n    scope: optional\n  - name: openssh-server\n    apt: true\n    scope: full\n  - name: pass\n    apt: true\n    brew: true\n    scope: system\n  - name: passage\n    script: true\n    script_cmd: install-passage\n    scope: minimal\n  - name: pinentry-curses\n    apt: true\n    scope: gui\n  - name: pinentry-mac\n    brew: true\n    scope: gui\n  - name: pip\n    pip: true\n    scope: optional\n    allow_upgrade: true\n  - name: pipx\n    brew: true\n    pip: true\n    scope: optional\n    allow_upgrade: true\n  - name: poetry\n    brew: false\n    script: false\n    pipx: true\n    script_cmd: curl -sSL https://install.python-poetry.org | python3 -\n    scope: optional\n  - name: poethepoet\n    pipx: true\n    check_installed: command -v poe &amp;&gt;/dev/null\n    completion_file: ${HOME}/.oh-my-zsh/completions/_poe\n    completion_cmd: poe _zsh_completion\n    scope: optional\n    allow_upgrade: false\n  - name: pre-commit\n    brew: false\n    pipx: true\n    scope: optional\n    allow_upgrade: false\n  - name: procps\n    apt: true\n    scope: minimal\n  - name: python3-dev\n    apt: true\n    scope: full\n  - name: python3-pip\n    apt: true\n    scope: full\n  - name: python3-setuptools\n    apt: true\n    scope: full\n  - name: python3-testresources\n    apt: true\n    scope: full\n  - name: python3-venv\n    apt: true\n    scope: full\n  - name: python-semantic-release\n    pipx: true\n    check_installed: command -v semantic-release &amp;&gt;/dev/null\n    scope: optional\n  - name: rbenv\n    script: true\n    script_cmd: \"curl -fsSL https://github.com/rbenv/rbenv-installer/raw/HEAD/bin/rbenv-installer | bash\"\n    check_installed: \"command -v rbenv &amp;&gt; /dev/null\"\n    scope: optional\n  - name: restic\n    brew: true\n    scope: optional\n  - name: rust\n    script: true\n    script_cmd: \"curl https://sh.rustup.rs -sSf | sh -s -- -y --profile=minimal\"\n    check_installed: \"command -v rustup &amp;&gt; /dev/null\"\n    scope: full\n  - name: sdkman\n    script: true\n    script_cmd: \"curl -s 'https://get.sdkman.io' | bash\"\n    check_prereqs: \"command -v unzip &amp;&gt; /dev/null\"\n    check_installed: \"[[ -f ${HOME}/.sdkman/bin/sdkman-init.sh ]]\"\n    scope: full\n  - name: seahorse\n    apt: true\n    scope: gui\n  - name: serviceman\n    script: true\n    script_cmd: webi serviceman\n    check_prereqs: \"command -v webi &amp;&gt; /dev/null\"\n    scope: optional\n  - name: setuptools\n    pip: true\n    scope: optional\n    allow_upgrade: true\n  - name: snapd\n    apt: true\n    scope: full\n  - name: sops\n    brew: true\n    scope: minimal\n  - name: sourcery\n    pipx: true\n    scope: optional\n  - name: sourcegraph\n    script: true\n    script_cmd: curl -L https://sourcegraph.com/.api/src-cli/src_linux_amd64 -o ${HOME}/.local/bin/src &amp;&amp; chmod +x ${HOME}/.local/bin/src\n    check_installed: command -v src &amp;&gt;/dev/null\n    scope: optional\n  - name: sourcegraph/src-cli/src-cli\n    brew: true\n    check_installed: command -v src &amp;&gt;/dev/null\n    scope: optional\n  - name: stow\n    apt: true\n    brew: true\n    scope: optional\n  - name: tree\n    apt: true\n    brew: true\n    scope: minimal\n  - name: tmux\n    apt: true\n    brew: true\n    scope: minimal\n    allow_upgrade: true\n  - name: tzdata\n    apt: true\n    scope: minimal\n  - name: unzip\n    apt: true\n    brew: true\n    scope: minimal\n  - name: uv\n    script: true\n    script_cmd: \"curl -LsSf https://astral.sh/uv/install.sh | sh\"\n    check_installed: \"command -v uv &amp;&gt; /dev/null\"\n    current_version: \"uv --version | cut -d' ' -f2\"\n    latest_version: $(curl -s https://api.github.com/repos/astral-sh/uv/releases/latest | grep 'tag_name' | cut -d'\"' -f4)\n    scope: optional\n    allow_upgrade: true\n  - name: vim\n    apt: true\n    scope: minimal\n  - name: wakatime\n    pipx: true\n    scope: optional\n  - name: webi\n    script: true\n    script_cmd: curl https://webi.sh/webi | sh\n    cmd_name: webi\n    scope: gui\n  - name: wheel\n    pip: true\n    scpoe: optional\n  - name: wslu\n    apt: true\n  - name: xclip\n    apt: true\n    scope: gui\n  - name: yq\n    brew: true\n    script: true\n    script_cmd: install-yq\n    scope: minimal\n  - name: zip\n    apt: true\n    scope: minimal\n  - name: zsh\n    apt: true\n    brew: true\n    scope: minimal\n</code></pre>"},{"location":"references/","title":"References","text":"<ul> <li>chezmoi</li> <li>dotdrop</li> <li>dotfiles</li> <li>git-secret</li> <li>Use git-secret to encrypt secrets</li> <li>Secrets at the Command Line</li> <li>Using Command-Line Passphrase Input for GPG with Git</li> <li>Using SOPS with Age and Git like a Pro</li> <li>Goodbye Sealed Secrets, hello SOPS</li> <li>Signing Git Commits with Your SSH Key</li> <li>Backup to Backblaze B2 using restic and rclone</li> <li>Set up your new machine in a blink of an eye</li> <li>How I Use Restic to Back up My Home Folders to Backblaze B2</li> <li>Setting up Git LFS with Dropbox</li> <li>Installing NVIDIA DGX software stack in Bright Ubuntu 20.04 software images</li> <li>Integrating Python Poetry with Docker</li> </ul> <p>A large part of .chezmoitemplates and .chezmoiscripts files are initially inspired by felipecrs/dotfiles.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"refs/dgx-a100/","title":"Install DGX tools and Nvidia drivers","text":"<pre><code># Enable NVIDIA repositories\ncurl https://repo.download.nvidia.com/baseos/ubuntu/focal/dgx-repo-files.tgz | sudo tar xzf - -C /\n\n# Update internal APT database\napt update\n\n# Recommended: Upgrade all software packages with the latest versions\napt upgrade\n\n# Install DGX system tools and configurations\napt install -y dgx-a100-system-configurations dgx-a100-system-tools dgx-a100-system-tools-extra\n\n# Disable the ondemand governor to set the governor to performance mode\nsystemctl disable ondemand\n\n# Recommended: Disable unattended upgrades\napt purge -y unattended-upgrades\n\n# Install latest kernel\napt install -y linux-generic\n\n# Install NVIDIA CUDA driver\napt install -y nvidia-driver-470-server linux-modules-nvidia-470-server-generic libnvidia-nscq-470 nvidia-modprobe nvidia-fabricmanager-470 datacenter-gpu-manager nv-persistence-mode\n\n# Enable required services\nsystemctl enable nvidia-fabricmanager nvidia-persistenced nvidia-dcgm\n\n# Install Serial over LAN and NVIDIA System Management tool packages:\napt install -y nvidia-ipmisol nvsm\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#getting-started","title":"Getting started","text":"<p>The following guide will walk you through the process of installing and initializing the Dotfiles project on your machine. This will help you set up a consistent development environment across different systems, simplifying your workflow and making it easier to collaborate with others.</p>"},{"location":"usage/#prerequisites","title":"Prerequisites","text":"<p>Before proceeding with the installation, ensure that your system has the following tools:</p> <ul> <li><code>wget</code> or <code>curl</code>: To fetch the installation script from the internet.</li> <li><code>git</code>: To clone the Dotfiles repository.</li> </ul> <p>Most Linux distributions come with these tools pre-installed. If not, you can install them using your package manager.</p>"},{"location":"usage/#installing-dotfiles","title":"Installing Dotfiles","text":"<p>To install the Dotfiles project on your machine, you need to fetch the installation script and execute it. You can do this using either <code>wget</code> or <code>curl</code>:</p>"},{"location":"usage/#using-wget","title":"Using <code>wget</code>:","text":"<pre><code>sh -c \"$(wget -qO- https://dotfiles.entelecheia.ai/install)\"\n</code></pre>"},{"location":"usage/#using-curl","title":"Using <code>curl</code>:","text":"<pre><code>sh -c \"$(curl -fsSL https://dotfiles.entelecheia.ai/install)\"\n</code></pre> <p>Running the above command will download the installation script and execute it, cloning the Dotfiles repository to your machine and setting up the necessary configurations.</p> <p> For unattended installations such as in a dockerfile, you can use the environment variables to initialize the dotfiles automatically. For example:</p> <pre><code># install dotfiles\nARG USER_FULLNAME=\"John Doe\"\nARG USER_EMAIL=\"john.doe@email.com\"\nARG GITHUB_USERNAME=\"john-doe\"\nARG SYSTEM_HOSTNANE=\"devcon-arm64\"\n\nENV USER_FULLNAME=$USER_FULLNAME\nENV USER_EMAIL=$USER_EMAIL\nENV GITHUB_USERNAME=$GITHUB_USERNAME\nENV SYSTEM_HOSTNAME=$SYSTEM_HOSTNAME\nENV WORKSPACE_LOCATION=\"/\"\nENV DOTFILES_APPLY_ROOTMOI=0\nENV REMOTE_CONTAINERS=1\n\nRUN sh -c \"$(wget -qO- https://dotfiles.entelecheia.ai/install)\"\n\nCMD [\"zsh\"]\n</code></pre> <p>Or you can provide the environment variables in the command line:</p> <pre><code>USER_FULLNAME=\"John Doe\" \\\nUSER_EMAIL=\"john.doe@email.com\" \\\nGITHUB_USERNAME=\"john-doe\" \\\nSYSTEM_HOSTNAME=\"devcon-arm64\" \\\nWORKSPACE_LOCATION=\"/\" \\\nDOTFILES_APPLY_ROOTMOI=0 \\\nREMOTE_CONTAINERS=1 \\\nsh -c \"$(wget -qO- https://dotfiles.entelecheia.ai/install)\"\n</code></pre>"},{"location":"usage/#initializing-dotfiles","title":"Initializing Dotfiles","text":"<p>After the installation, the initialization process will start automatically. This step applies the configurations defined in your dotfiles to your system, ensuring a consistent development environment.</p> <p></p> <p>If you need to re-initialize your dotfiles manually, you can run the following command:</p> <pre><code>dotu init\n</code></pre> <p>This command will update your system with the latest configurations from your dotfiles, keeping your environment up-to-date and in sync with any changes you've made.</p> <p>Once the initialization process is complete, you can start using your newly configured development environment. Feel free to explore the available configurations and customize them to your preferences.</p>"},{"location":"usage/#repositories-and-repository-templates-for-setting-up-your-own-dotfiles","title":"Repositories and repository templates for setting up your own dotfiles","text":"<ul> <li>dotdrop-files</li> <li>password-store</li> <li>passage-store</li> </ul>"},{"location":"usage/#installing-the-font-on-windows","title":"Installing the font on Windows","text":"<ol> <li>Download Fira Code Regular Nerd Font Complete.</li> <li>Open the downloaded file and click Install.</li> <li>Restart Windows Terminal or VS Code.</li> </ol>"},{"location":"usage/#configuring-the-font-in-vs-code","title":"Configuring the font in VS Code","text":"<ol> <li>Open settings by pressing Ctrl/Cmd+,.</li> <li>Change the font family to FiraCode Nerd Font in Terminal \u203a Integrated: Font Family.</li> </ol>"},{"location":"usage/#configuring-the-font-in-windows-terminal","title":"Configuring the font in Windows Terminal","text":"<ol> <li>On Windows Terminal, press Ctrl+, to open the settings.</li> <li>Go to Profiles -&gt; Defaults in the left panel. Then, go to Additional settings -&gt; Appearance.</li> <li>At Text -&gt; Font face, enable the Show all fonts option and select FiraCode Nerd Font. Like below:</li> </ol>"},{"location":"usage/aliases/","title":"Aliases","text":"<p>Sure, here are the descriptions for the aliases used in the dotfiles project:</p> <ol> <li> <p><code>czm</code>: This is an alias for \"chezmoi\", a tool for managing your dotfiles across multiple machines.</p> </li> <li> <p><code>czmi</code>: This alias is used for initializing chezmoi in your system.</p> </li> <li> <p><code>czma</code>: This is an alias for applying the changes made in your dotfiles using chezmoi.</p> </li> <li> <p><code>czmdr</code>: This command allows for a dry-run of chezmoi apply. It shows the changes that would be made without actually applying them.</p> </li> <li> <p><code>dotp</code>: This alias is used for pushing your dotfiles to your repository.</p> </li> <li> <p><code>dotu</code>: This alias is used for updating your dotfiles.</p> </li> <li> <p><code>dotut</code>: This alias is used for updating the tools used for managing your dotfiles.</p> </li> <li> <p><code>dotb</code>: This is an alias for backing up your dotfiles.</p> </li> <li> <p><code>dotr</code>: This is an alias for restoring your dotfiles from a backup.</p> </li> <li> <p><code>p</code>: This is an alias for the \"pass\" command, a password manager for Unix-based systems.</p> </li> <li> <p><code>pp</code>: This is an alias for \"passage\", a utility for managing and retrieving passwords.</p> </li> <li> <p><code>psz</code>: This is a fuzzy finder for the pass command.</p> </li> <li> <p><code>psg</code>: This is a fuzzy finder for the passage command.</p> </li> <li> <p><code>psi</code>: This is an alias for inserting a new entry into pass.</p> </li> <li> <p><code>psr</code>: This is an alias for removing an entry from pass.</p> </li> <li> <p><code>pssop</code>: This alias is used for syncing your pass passwords with OnePassword.</p> </li> <li> <p><code>pss</code>: This is an alias for showing a pass entry.</p> </li> <li> <p><code>d2op</code>: This alias is used for importing a dotenv file into OnePassword.</p> </li> <li> <p><code>dotdrop</code>: This alias is for managing dotfiles using the dotdrop tool.</p> </li> <li> <p><code>rootdrop</code>: This alias is for managing dotfiles as the root user with dotdrop.</p> </li> <li> <p><code>cdt</code>: This alias is for starting a Visual Studio Code Remote Development Tunnel.</p> </li> <li> <p><code>cdtrn</code>: This alias is for renaming a Visual Studio Code Remote Development Tunnel.</p> </li> <li> <p><code>cdtsi</code>: This alias is for installing the Visual Studio Code Remote Development Tunnel as a service.</p> </li> <li> <p><code>cdtsu</code>: This alias is for uninstalling the Visual Studio Code Remote Development Tunnel service.</p> </li> <li> <p><code>cdtsl</code>: This alias is for displaying the log of the Visual Studio Code Remote Development Tunnel service.</p> </li> <li> <p><code>mkctl</code>: This alias is for invoking kubectl on a Microk8s cluster.</p> </li> <li> <p><code>cw</code>: This alias is for changing the owner of a workspace.</p> </li> <li> <p><code>cdc</code>: This alias is for changing the current directory to the chezmoi working tree.</p> </li> <li> <p><code>cdd</code>: This alias is the same as cdc.</p> </li> <li> <p><code>cddd</code>: This alias is for changing the current directory to the dotdrop configuration directory.</p> </li> <li> <p><code>cddk</code>: This alias is for changing the current directory to the docker share directory.</p> </li> <li> <p><code>dkfs</code>: This alias is for syncing Dockerfiles.</p> </li> <li> <p><code>dkfl</code>: This alias is for pulling Dockerfiles from a repository.</p> </li> <li> <p><code>dkfc</code>: This alias is for cloning Dockerfiles from a repository.</p> </li> <li> <p><code>dkc</code>: This alias is for using docker-compose.</p> </li> <li> <p><code>dkcb</code>: This alias is for building a service using docker-compose.</p> </li> <li> <p><code>dkcu</code>: This alias is for starting a service using docker-compose.</p> </li> <li> <p><code>dkcr</code>: This alias is for running a one-off command on a service using docker-compose.</p> </li> <li> <p><code>dkcc</code>: This alias is for displaying the docker-compose configuration.</p> </li> <li> <p><code>dkb</code>: This is an alias for building an image from a Dockerfile.</p> </li> <li> <p><code>dkr</code>: This is an alias for running a command in a new Docker container.</p> </li> <li> <p><code>dkcl</code>: This is an alias for cleaning up resources that are no longer needed.</p> </li> <li> <p><code>dki</code>: This is an alias for managing Docker images.</p> </li> <li> <p><code>dkls</code>: This is an alias for listing Docker images.</p> </li> <li> <p><code>dkl</code>: This is the same as <code>dkls</code>, used for listing Docker images.</p> </li> <li> <p><code>dkcls</code>: This is an alias for listing all Docker containers.</p> </li> <li> <p><code>dkirm</code>: This is an alias for removing Docker images.</p> </li> <li> <p><code>dkps</code>: This is an alias for listing running Docker processes.</p> </li> <li> <p><code>deit</code>: This is an alias for running a command in a running Docker container in interactive mode.</p> </li> <li> <p><code>dkx</code>: This is the same as <code>deit</code>, used for running a command in a running Docker container in interactive mode.</p> </li> <li> <p><code>dkex</code>: This is the same as <code>deit</code> and <code>dkx</code>, used for running a command in a running Docker container in interactive mode.</p> </li> <li> <p><code>dotenv</code>: This alias is for running the dotenv-vault tool, which is used for managing environment variables securely.</p> </li> <li> <p><code>denv</code>: This is the same as <code>dotenv</code>, used for running dotenv-vault.</p> </li> <li> <p><code>refreshenv</code>: This function refreshes the current shell environment.</p> </li> <li> <p><code>mcd</code>: This function creates a new directory and then changes to it.</p> </li> <li> <p><code>cdp</code>: This function changes to a directory within your project workspace.</p> </li> <li> <p><code>cdr</code>: This function changes to a directory within your reference workspace.</p> </li> <li> <p><code>cdw</code>: This is an alias for changing the current directory to the workspace home.</p> </li> <li> <p><code>gcdp</code>: This function clones a git repository into your project workspace and then changes to it.</p> </li> <li> <p><code>gcdr</code>: This function clones a git repository into your reference workspace and then changes to it.</p> </li> <li> <p><code>chezmoi-re-run-scripts</code>: This function is used to re-run chezmoi scripts by deleting the chezmoi state database and applying chezmoi again.</p> </li> <li> <p><code>gsudo</code>: This function is used to execute a command as the root user using gsudo.</p> </li> <li> <p><code>cdwin</code>: This is an alias for changing the current directory to the Windows home directory when using Windows Subsystem for Linux (WSL).</p> </li> <li> <p><code>socrypt-inplace</code>: This alias is for encrypting a file in place using socrypt.</p> </li> <li> <p><code>senc</code>: This is an alias for encrypting a file using socrypt.</p> </li> <li> <p><code>senci</code>: This is an alias for encrypting a file in place using socrypt.</p> </li> <li> <p><code>sdecf</code>: This is an alias for decrypting a file using socrypt.</p> </li> <li> <p><code>sdec</code>: This is an alias for decrypting a file using sops.</p> </li> <li> <p><code>czc</code>: This is an alias for making a commit using commitizen, a tool that encourages meaningful commit messages.</p> </li> <li> <p><code>gtask</code>: This is an alias for executing a global task.</p> </li> <li> <p><code>t</code>: This is an alias for the Taskfile tool, used for running tasks defined in a Taskfile.</p> </li> <li> <p><code>tls</code>: This is an alias for listing tasks defined in a Taskfile.</p> </li> <li> <p><code>tla</code>: This is an alias for listing all tasks defined in a Taskfile.</p> </li> <li> <p><code>gt</code>: This is the same as <code>gtask</code>, used for executing a global task.</p> </li> <li> <p><code>gtls</code>: This is an alias for listing global tasks.</p> </li> <li> <p><code>gtla</code>: This is an alias for listing all global tasks.</p> </li> </ol> <p>The list continues with aliases for various commands related to Docker, Kubernetes, and other tools. All these aliases are meant to shorten the commands that you would normally use when working with these tools.</p>"},{"location":"usage/configuration/","title":"Configuration","text":"<p>The Dotfiles project offers a flexible and customizable configuration system, allowing you to tailor your development environment to your preferences and requirements. The configuration is defined using a data template that includes various settings and options. During the installation process, you will be prompted with interactive questions to configure each section.</p>"},{"location":"usage/configuration/#configuration-options","title":"Configuration Options","text":"<p>Here's an explanation of the key configuration options and how to customize them, along with example configurations:</p>"},{"location":"usage/configuration/#personal-information","title":"Personal information:","text":"<p>Set your name, email address, and GitHub username by customizing the following variables in the configuration file. You will be prompted to enter these values during the installation process.</p> <p>Example configuration:</p> <pre><code>name: \"Your Name\"\nemail: \"your.email@example.com\"\ngithub:\n  username: \"your-github-username\"\n</code></pre> <p>These values are used to configure your Git settings, among other things.</p>"},{"location":"usage/configuration/#system-settings","title":"System settings:","text":"<p>You can configure various system settings, such as the hostname, whether you're using WSL, and if you're running in a development container. You will be asked about these settings during the installation process.</p> <p>Example configuration:</p> <pre><code>system:\n  hostname: \"your-hostname\"\n  is_wsl: false\n  is_devcontainer: false\n</code></pre>"},{"location":"usage/configuration/#ssh-settings","title":"SSH settings:","text":"<p>Configure your SSH settings by specifying the home directory, algorithm, identity file, and authorized_keys file. You will be prompted to provide these values during the installation process.</p> <p>Example configuration:</p> <pre><code>ssh:\n  home: \"~/.ssh\"\n  algorithm: \"rsa\"\n  identity_file: \"id_rsa\"\n  authorized_keys: \"authorized_keys\"\n</code></pre>"},{"location":"usage/configuration/#gnupg-settings","title":"GnuPG settings:","text":"<p>Customize your GnuPG settings, including the home directory, key ID file, and passphrase. You will be asked to input these values during the installation process.</p> <p>Example configuration:</p> <pre><code>gnupg:\n  home: \"~/.gnupg\"\n  key_id_file: \"gpg_key_id\"\n  passphrase: \"your-gpg-passphrase\"\n</code></pre>"},{"location":"usage/configuration/#workspace-settings","title":"Workspace settings:","text":"<p>Configure your workspace by specifying the name, location, project directory, and reference directory. You will be prompted to provide these values during the installation process.</p> <p>Example configuration:</p> <pre><code>workspace:\n  name: \"your-workspace-name\"\n  location: \"~/your-workspace-location\"\n  project_dir: \"Projects\"\n  reference_dir: \"References\"\n</code></pre>"},{"location":"usage/configuration/#integrated-tools","title":"Integrated tools:","text":"<p>Enable or disable specific tools and their related configurations, such as Docker, Visual Studio Code, or Python tools. You will be asked about these settings during the installation process.</p> <p>Example configuration:</p> <pre><code>docker:\n  enabled: true\ncode:\n  enabled: true\npython_tools:\n  enabled: true\n</code></pre>"},{"location":"usage/configuration/#github-repositories","title":"GitHub repositories:","text":"<p>Add a list of GitHub repositories to clone automatically during the setup process. You will be prompted to enter these values during the installation process.</p> <p>Example configuration:</p> <pre><code>github_repos:\n  - name: \"repo-owner/repo-name\"\n    url: \"https://github.com/repo-owner/repo-name.git\"\n</code></pre>"},{"location":"usage/configuration/#configuration-questions","title":"Configuration Questions","text":"<p>To customize your Dotfiles configuration, simply answer the interactive prompts during the installation process. This will ensure that your development environment is tailored to your specific preferences and requirements, making it more efficient and enjoyable to work with.</p> <ol> <li> <p>Minimum Mode: Determines whether to install the system in the minimum mode, where only essential configurations and tools are installed.    Question: \"Do you want to install in minimum mode?\"</p> </li> <li> <p>Automatic Dotfiles Update: Defines if the system should automatically update the dotfiles configuration.    Question: \"Do you want to update dotfiles automatically?\"</p> </li> <li> <p>Package Upgrade: Specifies whether to upgrade the system packages automatically as needed.    Question: \"Do you want to upgrade packages if needed?\"</p> </li> <li> <p>Verbose Mode: Sets whether to enable verbose mode, which provides more detailed logs of actions and processes.    Question: \"Do you want to enable verbose mode?\"</p> </li> <li> <p>Root User Dotfiles: If the user has root privileges, this option asks if the user wants to install dotfiles for the root user as well.    Question: \"Do you want to install dotfiles for the root user?\"</p> </li> <li> <p>User Details: Asks for the full name, email, and GitHub and Docker usernames of the user. This information is used for configuring user details in tools like Git, and service access like GitHub and Docker.    Questions: \"What is your full name?\", \"What is your GitHub username?\", \"What is your Docker username?\", \"What is your email?\"</p> </li> <li> <p>Hostname: Asks for the hostname of the machine. This is used for network identification.    Question: \"What is the hostname?\"</p> </li> <li> <p>GitHub Token: Asks for the GitHub token to authenticate with GitHub services.    Question: \"What is your GitHub Token?\"</p> </li> <li> <p>GPG Key Passphrase: Asks for the passphrase to use for the GPG key. The GPG key can be used to encrypt, decrypt, and sign documents and communications.    Question: \"What passphrase do you want to use for your GPG key?\"</p> </li> <li> <p>Git Commit Signing: Determines if the user wants to sign git commits globally using GPG or SSH.     Question: \"Do you want to use GPG (or SSH) to sign git commits globally?\"</p> </li> <li> <p>Workspace Location: Asks where the user wants to place the workspace directory, which will store projects and related files.     Question: \"Where do you want to put your workspace?\"</p> </li> <li> <p>Doppler Token: If the user uses Doppler for managing environment variables, this question asks for the Doppler token.     Question: \"What is your Doppler token?\"</p> </li> <li> <p>Visual Studio Code: Asks if the user wants to use Visual Studio Code as the preferred code editor.     Question: \"Do you want to use visual studio code?\"</p> </li> <li> <p>Ngrok Authtoken and Port: If the user uses Ngrok for creating secure tunnels, this question asks for the Ngrok authtoken and the ssh service port.     Questions: \"What is your ngrok authtoken?\", \"What is your ssh service port for ngrok?\"</p> </li> <li> <p>Password Store Repository: If the user uses the pass or passage tool for password management, this question asks for the repository URL.     Questions: \"What is your password store repository URL?\", \"What is your passage repository URL?\"</p> </li> <li> <p>Autorestic: Asks if the user wants to use autorestic for backing up files.     Question: \"Do you want to use autorestic to backup your files?\"</p> </li> <li> <p>Additional Packages: Asks for any additional system packages that the user wants to install.     Question: \"What are the additional packages to install?\"</p> </li> </ol> <p>These questions help in tailoring the dotfiles configuration to suit the specific needs and preferences of the user.</p>"},{"location":"usage/dockerfiles/","title":"Dockerfiles","text":"<p>There are a few helper scripts that can be used to simplify the process of building and running Docker containers. These scripts are installed in the process of setting up <code>dotfiles</code> and can be found in the <code>.local/bin</code> directory.</p>"},{"location":"usage/dockerfiles/#dockerfiles-clone-script","title":"<code>dockerfiles-clone</code> Script","text":"<p>The <code>dockerfiles-clone</code> script is designed to help you clone or update the Dockerfiles repository on your system. To use this script, follow these steps:</p> <ol> <li>Configure Environment Variables (optional):    If you have specific values for <code>DOCKERFILES_REPO</code> or <code>DOCKERFILES_DIR</code>, you can set these environment variables before running the script. Otherwise, the script will use the default values specified in the script.</li> </ol> <pre><code>export DOCKERFILES_REPO=\"https://github.com/username/dockerfiles.git\"\nexport DOCKERFILES_DIR=\"/path/to/dockerfiles\"\n</code></pre> <ol> <li>Run the Script:    Execute the <code>dockerfiles-clone</code> script:</li> </ol> <pre><code>dockerfiles-clone\n</code></pre> <p>This script will perform the following tasks:</p> <ul> <li>Check if the Dockerfiles repository is set. If not, it will display a message and exit.</li> <li>If the Dockerfiles directory exists, it will prompt you to remove the existing directory.<ul> <li>If you choose to remove the existing directory, it will delete the directory and proceed to clone the repository.</li> <li>If you choose not to remove the existing directory, it will display a message and exit.</li> </ul> </li> <li>If the Dockerfiles directory does not exist, it will clone the Dockerfiles repository to the specified directory.</li> </ul> <p>After running the <code>dockerfiles-clone</code> script, your Dockerfiles repository will be cloned or updated, and you can start using the Dockerfiles on your system.</p>"},{"location":"usage/dockerfiles/#dockerfiles-pull-script","title":"<code>dockerfiles-pull</code> Script","text":"<p>The <code>dockerfiles-pull</code> script helps you update the Dockerfiles repository on your system. To use this script, follow these steps:</p> <ol> <li>Configure Environment Variables (optional):    If you have specific values for <code>DOCKERFILES_REPO</code> or <code>DOCKERFILES_DIR</code>, you can set these environment variables before running the script. Otherwise, the script will use the default values specified in the script.</li> </ol> <pre><code>export DOCKERFILES_REPO=\"https://github.com/username/dockerfiles.git\"\nexport DOCKERFILES_DIR=\"/path/to/dockerfiles\"\n</code></pre> <ol> <li>Run the Script:    Execute the <code>dockerfiles-pull</code> script:</li> </ol> <pre><code>dockerfiles-pull\n</code></pre> <p>This script will perform the following tasks:</p> <ul> <li>Check if the Dockerfiles directory exists.</li> <li>If the directory exists and is a valid Git repository, it will update the Dockerfiles repository using <code>git pull --rebase --autostash</code>.</li> </ul> <p>After running the <code>dockerfiles-pull</code> script, your Dockerfiles repository will be updated, and you can continue using the latest Dockerfiles on your system.</p>"},{"location":"usage/dockerfiles/#dockerfiles-sync-script","title":"<code>dockerfiles-sync</code> Script","text":"<p>The <code>dockerfiles-sync</code> script helps you synchronize Dockerfiles between your project directory and the shared Dockerfiles directory. To use this script, follow these steps:</p> <ol> <li>Configure Environment Variables (optional):    If you have specific values for <code>WORKSPACE_PROJECT_DIR</code> or <code>DOCKERFILES_SHARE_DIR</code>, you can set these environment variables before running the script. Otherwise, the script will use the default values specified in the script.</li> </ol> <pre><code>export WORKSPACE_PROJECT_DIR=\"/path/to/workspace/project/directory\"\nexport DOCKERFILES_SHARE_DIR=\"/path/to/dockerfiles/share/directory\"\n</code></pre> <ol> <li>Run the Script:    Execute the <code>dockerfiles-sync</code> script with the desired options:</li> </ol> <pre><code>dockerfiles-sync [DOCKER_NAME] [--from-project] [--project-directory PROJECT_DIR] [--dockerfiles-directory DOCKERFILES_DIR] [-h|--help]\n</code></pre> <p>Available options:</p> <ul> <li><code>DOCKER_NAME</code>: Specify the name of a specific Docker project to sync.</li> <li><code>--from-project</code>: Sync Dockerfiles from the project directory to the shared Dockerfiles directory.</li> <li><code>--project-directory PROJECT_DIR</code>: Set the project directory path.</li> <li><code>--dockerfiles-directory DOCKERFILES_DIR</code>: Set the shared Dockerfiles directory path.</li> <li><code>-h|--help</code>: Display usage information.</li> </ul> <p>Examples:</p> <ul> <li> <p>Sync all Dockerfiles from the shared Dockerfiles directory to the workspace project directory:</p> <pre><code>dockerfiles-sync\n</code></pre> </li> <li> <p>Sync a specific Dockerfile from the shared Dockerfiles directory to the workspace project directory:</p> <pre><code>dockerfiles-sync my-docker-project\n</code></pre> </li> <li> <p>Sync all Dockerfiles from the workspace project directory to the shared Dockerfiles directory:</p> <pre><code>dockerfiles-sync --from-project\n</code></pre> </li> <li> <p>Sync a specific Dockerfile from the workspace project directory to the shared Dockerfiles directory:</p> <pre><code>dockerfiles-sync my-docker-project --from-project\n</code></pre> </li> </ul> <p>After running the <code>dockerfiles-sync</code> script, your Dockerfiles will be synchronized between the specified directories. The <code>dk-compose</code> script is a convenient wrapper for managing Docker Compose projects. To use the script, follow the usage format below:</p>"},{"location":"usage/dockerfiles/#dk-compose-script","title":"<code>dk-compose</code> Script","text":"<p><code>dk-compose</code> is a script for managing Docker containers using Docker Compose, with a comprehensive set of options for configuring the environment.</p>"},{"location":"usage/dockerfiles/#usage","title":"Usage","text":"<pre><code>dk-compose COMMAND DOCKER_NAME [OPTIONS]\n</code></pre>"},{"location":"usage/dockerfiles/#arguments","title":"Arguments","text":"<ul> <li> <p>COMMAND - The Docker Compose command to be executed. Valid commands include:</p> </li> <li> <p><code>build</code>: Build the Docker services as defined in the Compose file.</p> </li> <li><code>run</code>: Execute a one-off command on a service.</li> <li><code>up</code>: Create and start the containers as per the Compose file.</li> <li><code>down</code>: Halt and remove containers, networks, and volumes as defined in the Compose file.</li> <li> <p><code>config</code>: Validate and view the Compose file.</p> </li> <li> <p>DOCKER_NAME - The name for the Docker project.</p> </li> </ul>"},{"location":"usage/dockerfiles/#options","title":"Options","text":"<ul> <li> <p><code>-t, --tag TAG</code>: Use a specific tag for the Docker Compose file and the environment file. The script will attempt to find files named <code>docker-compose-TAG.yaml</code> and <code>docker.TAG.env</code>, where <code>TAG</code> is the provided tag.</p> </li> <li> <p><code>--from-project</code>: Indicate to use the project directory as the source for the Docker Compose files, overriding the default Dockerfiles directory.</p> </li> <li> <p><code>--project-directory PROJECT_DIR</code>: Set a custom path to the project directory. If not specified, the script defaults to the preconfigured project directory.</p> </li> <li> <p><code>--dockerfiles-directory DOCKERFILES_DIR</code>: Set a custom path to the directory containing Dockerfiles. If not specified, the script defaults to the preconfigured Dockerfiles directory.</p> </li> <li> <p><code>-c, --compose-filename COMPOSE_FILENAME</code>: Indicate a custom Docker Compose filename. If not specified, the script defaults to <code>docker-compose.yaml</code> or <code>docker-compose-TAG.yaml</code> based on the tag provided.</p> </li> <li> <p><code>-e, --env-file FILE</code>: Specify the environment file for Docker Compose.</p> </li> <li> <p><code>--shell-env-file FILE</code>: Specify the shell environment file. If not provided, the script defaults to <code>docker.env</code> in the Dockerfiles directory.</p> </li> <li> <p><code>--global-env-file FILE</code>: Specify the global environment file.</p> </li> <li> <p><code>-v, --version VERSION</code>: Set the version of the Docker image to use. This will be exported as the <code>VERSION</code> environment variable for the Docker Compose process.</p> </li> <li> <p><code>-l, --latest</code>: Indicate to use the latest Docker image version. This sets the <code>VERSION</code> environment variable to \"latest\".</p> </li> <li> <p><code>--push</code>: Enable the script to push the Docker image to a remote repository upon successful build.</p> </li> <li> <p><code>-n, --name CONTAINER_NAME</code>: Specify a custom name for the Docker container to be created.</p> </li> <li> <p><code>--network DOCKER_NETWORK_NAME</code>: Specify the Docker network name to use or create. If the network doesn't exist, the script will create it.</p> </li> <li> <p><code>-u, --username USERNAME</code>: Specify the username for the Docker image. If not provided, the script will default to the username from the configuration.</p> </li> <li> <p><code>-h, --help</code>: Display the help message containing usage information for the script.</p> </li> </ul>"},{"location":"usage/dockerfiles/#examples","title":"Examples","text":"<ol> <li>Build a Docker project named <code>my_project</code> with tag <code>dev</code>:</li> </ol> <pre><code>dk-compose build my_project -t dev\n</code></pre> <ol> <li>Run a one-off command (<code>some_command</code>) on the <code>my_service</code> service in the <code>my_project</code> Docker project:</li> </ol> <pre><code>dk-compose run my_project --name my_service some_command\n</code></pre> <ol> <li>Start the containers defined in the <code>my_project</code> Docker project with tag <code>prod</code>:</li> </ol> <pre><code>dk-compose up my_project -t prod\n</code></pre> <ol> <li>Stop and remove the containers, networks, and volumes defined in the <code>my_project</code> Docker project with tag <code>prod</code>:</li> </ol> <pre><code>dk-compose down my_project -t prod\n</code></pre> <p>Remember that the <code>dk-compose</code> script should be executable and located in a directory included in the <code>PATH</code> variable (e.g., <code>.local/bin</code>).</p>"},{"location":"usage/doppler/","title":"Doppler","text":"<p>Doppler is a secrets management platform that simplifies secure access to your sensitive information across different environments. In the Dotfiles project, Doppler is automatically installed and configured to provide a seamless integration for managing your secrets.</p>"},{"location":"usage/doppler/#doppler-usage","title":"Doppler Usage","text":"<p>To use Doppler with your Dotfiles project, follow these steps:</p>"},{"location":"usage/doppler/#1-doppler-login","title":"1. Doppler Login","text":"<p>To authenticate with Doppler and access your secrets, run the following command in your terminal:</p> <pre><code>doppler login\n</code></pre> <p>This command will open a browser window where you can authenticate with your Doppler account.</p>"},{"location":"usage/doppler/#2-project-setup","title":"2. Project Setup","text":"<p>To configure Doppler for a specific project in your Dotfiles, navigate to the project's directory and run the following command:</p> <pre><code>cd ./your/project/directory\ndoppler setup\n</code></pre> <p>This command will prompt you to select the project and configuration you want to use with Doppler. You can also pre-configure the Doppler project and config by creating a <code>doppler.yaml</code> file in your project directory.</p>"},{"location":"usage/doppler/#3-using-secrets","title":"3. Using Secrets","text":"<p>To access your secrets as environment variables in your Dotfiles project, run your commands with Doppler's <code>run</code> command:</p> <pre><code>doppler run -- your-command-here\n</code></pre> <p>This command will fetch the latest version of your secrets for the selected project and configuration and inject them as environment variables into the running process.</p>"},{"location":"usage/doppler/#4-removing-env-files","title":"4. Removing .env Files","text":"<p>To improve security and avoid confusion about the source of truth for your environment variables, remove any application code relying on <code>.env</code> files and delete any <code>.env</code> files that may still exist locally.</p> <p>By following these steps, you can easily manage and access your secrets securely using Doppler within your Dotfiles project. This integration ensures that your sensitive information is stored securely and is only accessible when needed, making your development environment even more efficient and secure.</p>"},{"location":"usage/doppler/#doppler-usage-with-service-tokens","title":"Doppler Usage with Service Tokens","text":"<p>Doppler Service Tokens provide restricted secrets access to applications in live environments. They adhere to the principle of least privilege by ensuring an application only has access to a single config within a project.</p>"},{"location":"usage/doppler/#requirements","title":"Requirements","text":"<ul> <li>Doppler CLI</li> <li>Access to the config for a project you wish to provide access to</li> </ul>"},{"location":"usage/doppler/#creating-service-tokens","title":"Creating Service Tokens","text":"<p>You can generate a Service Token using the Doppler dashboard or CLI.</p>"},{"location":"usage/doppler/#dashboard","title":"Dashboard","text":"<ol> <li>Go to the Project and select a Config</li> <li>Click the Access tab.</li> <li>Click on Generate Service Token.</li> <li>Copy the Service Token as it is only shown once.</li> </ol>"},{"location":"usage/doppler/#cli","title":"CLI","text":"<p>You can also generate a Service Token using the Doppler CLI:</p> <pre><code># Select the project and config\ndoppler setup\n\n# Create the Service Token\ndoppler configs tokens create token-name --plain\n</code></pre> <p>Or create the Service Token in a single command by providing the project and config as arguments:</p> <pre><code>doppler configs tokens create --project your-project --config your-config token-name --plain\n</code></pre>"},{"location":"usage/doppler/#using-service-tokens-with-the-cli","title":"Using Service Tokens with the CLI","text":"<p>There are three ways to configure the Doppler CLI to use the Service Token.</p>"},{"location":"usage/doppler/#option-1-persisted-service-token","title":"Option 1: Persisted Service Token","text":"<p>This option is best for Virtual Machines as it restricts which directory secrets can be fetched from and no additional configuration is required once registered (e.g., will persist across machine restarts).</p> <pre><code># Prevent configure command being leaked in bash history\nexport HISTIGNORE='doppler*'\n\n# Scope to location of application directory\necho 'dp.st.prd.xxxx' | doppler configure set token --scope /usr/src/app\n\n# Supply secrets to your application\ncd /usr/src/app\ndoppler run -- your-command-here\n</code></pre> <p>If refreshing the Service Token, the <code>doppler configure set token</code> will need to be run again with the new Service Token value.</p>"},{"location":"usage/doppler/#option-2-the-doppler_token-environment-variable","title":"Option 2: The <code>DOPPLER_TOKEN</code> environment variable","text":"<p>This method best suits environments where a Doppler integration sync isn't possible (e.g., Render) or when secrets access to multiple configs are required (e.g., CircleCI jobs for staging and production).</p> <pre><code># Prevent command with Service Token being recorded in bash history\nexport HISTIGNORE='export DOPPLER_TOKEN*'\n\nexport DOPPLER_TOKEN='dp.st.prd.xxxx'\ndoppler run -- your-command-here\n</code></pre>"},{"location":"usage/doppler/#option-3-the-token-argument","title":"Option 3: The <code>--token</code> argument","text":"<p>It's also possible to use the <code>--token</code> option for <code>doppler run</code>:</p> <pre><code># Prevent command with Service Token being recorded in bash history\nexport HISTIGNORE='doppler run*'\n\ndoppler run --token='dp.st.prd.xxxx' -- your-command-here\n</code></pre>"},{"location":"usage/doppler/#ephemeral-service-tokens","title":"Ephemeral Service Tokens","text":"<p>An ephemeral Service Token can be created by setting an expiration time. Once the duration is reached, the token is automatically deleted.</p> <pre><code>export DOPPLER_TOKEN=$(doppler configs tokens create ephemeral-token --max-age 1m --plain)\n</code></pre>"},{"location":"usage/doppler/#revoking-service-tokens","title":"Revoking Service Tokens","text":"<p>Revoking a Service Token is non-reversible and immediately prevents secrets access.</p>"},{"location":"usage/doppler/#dashboard_1","title":"Dashboard","text":"<p>Revoking a Service Token from the Dashboard is performed from the Access tab for the Config by clicking Revoke.</p>"},{"location":"usage/doppler/#cli_1","title":"CLI","text":"<p>Revoking a Service Token from the CLI can be done by executing the following command:</p> <pre><code>doppler configs tokens revoke -p PROJECT -c CONFIG dp.st.dev.fHhinxK...\n</code></pre>"},{"location":"usage/dotdrop/","title":"Dotdrop","text":"<p>A Powerful Tool for Managing Dotfiles</p>"},{"location":"usage/dotdrop/#introduction","title":"Introduction","text":"<p>Dotdrop is a versatile and efficient tool designed to help you manage your dotfiles across multiple systems, making it easier than ever to synchronize and deploy configuration files. Dotfiles, named for their leading dot (e.g., .bashrc, .vimrc), are hidden configuration files used by various applications and tools in UNIX-based systems. They store your personalized settings, making it convenient to set up your preferred environment on multiple machines.</p> <p>With Dotdrop, you can maintain a single, centralized repository for all your dotfiles and effortlessly deploy them to different systems using profiles. This approach saves time and ensures consistency across various environments.</p> <p>Key features of Dotdrop include:</p> <ol> <li>Simple configuration: Dotdrop uses a single YAML configuration file to manage your dotfiles and their deployment.</li> <li>Templating support: Dotdrop utilizes the powerful Jinja2 templating engine, allowing you to create dynamic and adaptable configuration files that cater to the specific requirements of different systems.</li> <li>Profiles: Dotdrop's profiles help you define custom settings for each system, ensuring a personalized and consistent setup across multiple machines.</li> <li>Synchronization: Dotdrop enables you to keep your dotfiles synchronized across various systems using Git or any other version control system, making it easy to track changes and updates.</li> </ol> <p>To get started with Dotdrop, visit the official GitHub repository at https://github.com/deadc0de6/dotdrop, where you'll find detailed documentation, installation instructions, and helpful examples to guide you through the process of managing your dotfiles with ease and efficiency.</p>"},{"location":"usage/dotdrop/#usage","title":"Usage","text":"<p>To start using Dotdrop for managing your dotfiles, follow these basic steps:</p> <ol> <li>Installation:    Install Dotdrop using pip:</li> </ol> <pre><code>pip install dotdrop --user\n</code></pre> <ol> <li>Initialization:    Create a new dotfiles repository and initialize Dotdrop:</li> </ol> <pre><code>mkdir ~/dotfiles\ncd ~/dotfiles\ndotdrop init\n</code></pre> <p>This will generate a <code>config.yaml</code> file in the <code>~/dotfiles</code> directory.</p> <ol> <li>Add dotfiles:    Import your existing dotfiles to the repository:</li> </ol> <pre><code>dotdrop import ~/.bashrc\ndotdrop import ~/.vimrc\n</code></pre> <p>This will copy your dotfiles to the repository and update the <code>config.yaml</code> file with the necessary information.</p> <ol> <li>Create a profile:    Edit the <code>config.yaml</code> file to define a profile for your current system:</li> </ol> <pre><code>config:\n  backup: true\n  create: true\n  dotpath: dotfiles\nprofiles:\n  my-system:\n    - bashrc\n    - vimrc\ndotfiles:\n  bashrc:\n    src: bashrc\n    dst: ~/.bashrc\n  vimrc:\n    src: vimrc\n    dst: ~/.vimrc\n</code></pre> <p>Replace <code>my-system</code> with a unique name for your current system.</p> <ol> <li>Deploy dotfiles:    Apply your dotfiles to the current system using the specified profile:</li> </ol> <pre><code>dotdrop install --profile=my-system\n</code></pre> <p>This will create or update the dotfiles in your home directory with the files stored in the repository.</p> <ol> <li>Synchronize changes:    If you make changes to your dotfiles, you can easily synchronize them back to the repository:</li> </ol> <pre><code>dotdrop update ~/.bashrc\ndotdrop update ~/.vimrc\n</code></pre> <p>Remember to commit and push the changes to your remote repository (e.g., GitHub) to keep your dotfiles in sync across multiple systems.</p> <p>These basic steps should help you get started with Dotdrop for managing and deploying your dotfiles across different systems. For advanced usage, such as templating and custom actions, refer to the official Dotdrop documentation.</p>"},{"location":"usage/dotdrop/#dotfiles-setup-dotdrop-script","title":"<code>dotfiles-setup-dotdrop</code> Script","text":"<p>The <code>dotfiles-setup-dotdrop</code> script is designed to help you set up or update the Dotdrop repository and deploy the dotfiles to your system. To use this script, follow these steps:</p> <ol> <li>Configure Environment Variables (optional):    If you have specific values for <code>DOTDROP_PROFILE</code> or <code>DOTDROP_CONFIG</code>, you can set these environment variables before running the script. Otherwise, the script will use the default values specified in the script.</li> </ol> <pre><code>export DOTDROP_PROFILE=\"my-profile\"\nexport DOTDROP_CONFIG=\"/path/to/config.yaml\"\n</code></pre> <ol> <li>Run the Script:    Execute the <code>dotfiles-setup-dotdrop</code> script:</li> </ol> <pre><code>dotfiles-setup-dotdrop\n</code></pre> <p>This script will perform the following tasks:</p> <ul> <li>Ensure that <code>${HOME}/.local/bin</code> is included in your <code>PATH</code>.</li> <li>Clone or update the Dotdrop repository.</li> <li>If you have a local Dotdrop repository, it will copy or update the repository to <code>${HOME}/.config/dotdrop</code>.</li> <li>If you have a remote repository, it will clone or update the repository accordingly.</li> <li>Install or update dotfiles using the specified Dotdrop profile and configuration.</li> </ul> <p>After running the <code>dotfiles-setup-dotdrop</code> script, your dotfiles will be managed and deployed using Dotdrop, and your system should be configured according to the specified Dotdrop profile.</p>"},{"location":"usage/envs/","title":"Environment Variables","text":"<p>Here are descriptions for the environment variables used by the Dotfiles project.</p> <ul> <li> <p><code>DOTFILES_VERSION</code>: The version of your dotfiles.</p> </li> <li> <p><code>DOTFILES_OS</code>: The operating system on which the dotfiles are being used.</p> </li> <li> <p><code>USER_FULLNAME</code>: The full name of the user.</p> </li> <li> <p><code>USER_EMAIL</code>: The email of the user.</p> </li> <li> <p><code>SYSTEM_HOSTNAME</code>: The hostname of the system.</p> </li> <li> <p><code>DOTFILES_MINIMUM</code>: A flag indicating whether the dotfiles should be kept to a minimum configuration.</p> </li> <li> <p><code>DOTFILES_AUTO_UPDATE</code>: A flag indicating whether the dotfiles should be automatically updated.</p> </li> <li> <p><code>DOTFILES_UPGRADE_PACKAGES</code>: A flag indicating whether packages should be automatically upgraded during dotfiles installation or update.</p> </li> <li> <p><code>DOTFILES_APPLY_ROOTMOI</code>: A flag indicating whether root-level operations should be performed.</p> </li> <li> <p><code>DOTFILES_SUDOER</code>: A flag indicating whether the user is a sudoer.</p> </li> <li> <p><code>DOTFILES_VERBOSE</code>: A flag indicating whether to run the scripts in verbose mode.</p> </li> <li> <p><code>DOTFILES_USE_AUTORESTIC</code>: A flag indicating whether to use autorestic.</p> </li> <li> <p><code>DOTFILES_USE_DOTDROP</code>: A flag indicating whether to use dotdrop.</p> </li> <li> <p><code>DOTFILES_USE_PASS</code>: A flag indicating whether to use pass.</p> </li> <li> <p><code>DOTFILES_USE_PASSAGE</code>: A flag indicating whether to use passage.</p> </li> <li> <p><code>DOTFILES_USE_CODE</code>: A flag indicating whether to use vscode or not.</p> </li> <li> <p><code>DOTFILES_USE_PYTHON_TOOLS</code>: A flag indicating whether to install python development tools.</p> </li> <li> <p><code>DOTFILES_USE_1PASSWORD</code>: A flag indicating whether to use 1Password.</p> </li> <li> <p><code>DOTFILES_USE_VAULT</code>: A flag indicating whether to use vault.</p> </li> <li> <p><code>DOTFILES_USE_MICROK8S</code>: A flag indicating whether to use microk8s.</p> </li> <li> <p><code>DOTFILES_USE_NGROK</code>: A flag indicating whether to use ngrok.</p> </li> <li> <p><code>DOTDROP_PROFILE</code>: The user profile for Dotdrop.</p> </li> <li> <p><code>DOTDROP_CONFIGDIR</code>: The directory where Dotdrop configuration files are located.</p> </li> <li> <p><code>DOTDROP_CONFIG</code>: The main Dotdrop configuration file.</p> </li> <li> <p><code>GITHUB_USERNAME</code>: The username of the GitHub account.</p> </li> <li> <p><code>DOCKER_USERNAME</code>: The username of the Docker account.</p> </li> <li> <p><code>WORKSPACE_LOCATION</code>: The location of the workspace.</p> </li> <li> <p><code>WORKSPACE_ROOT</code>: The root directory of the workspace.</p> </li> <li> <p><code>WORKSPACE_HOME</code>: The home directory of the workspace.</p> </li> <li> <p><code>WORKSPACE_PROJECT_DIR</code>: The directory where workspace projects are located.</p> </li> <li> <p><code>GIT_WORKSPACE</code>: The directory where Git projects are located.</p> </li> <li> <p><code>WORKSPACE_REFERENCE_DIR</code>: The directory where reference files are stored.</p> </li> <li> <p><code>GIT_COMMIT_GPGSIGN</code>: A flag indicating whether to sign commits with GPG.</p> </li> <li> <p><code>GITHUB_TOKEN</code>: The GitHub token for authentication.</p> </li> <li> <p><code>GH_TOKEN</code>: The GitHub token, used as an alternative name for <code>GITHUB_TOKEN</code>.</p> </li> <li> <p><code>GITHUB_USER</code>: The GitHub user, same as <code>GITHUB_USERNAME</code>.</p> </li> <li> <p><code>VISUAL</code>: The preferred visual text editor.</p> </li> <li> <p><code>EDITOR</code>: The preferred command-line text editor.</p> </li> <li> <p><code>SSH_HOME</code>: The home directory for SSH.</p> </li> <li> <p><code>GNUPGHOME</code>: The home directory for GNUPG.</p> </li> <li> <p><code>PASSWORD_STORE_DIR</code>: The directory where password-store passwords are kept.</p> </li> <li> <p><code>PASSAGE_DIR</code>: The directory where passage passwords are kept.</p> </li> <li> <p><code>GPG_PASSPHRASE</code>: The passphrase for the GPG key.</p> </li> <li> <p><code>GPG_KEY_ID</code>: The ID of the GPG key.</p> </li> <li> <p><code>AGE_KEY_FILE</code>: The file where the AGE key is stored.</p> </li> <li> <p><code>AUTHORIZED_AGE_KEYS_FILE</code>: The file where authorized AGE keys are stored.</p> </li> <li> <p><code>USER_UID</code>: The UID of the user.</p> </li> <li> <p><code>USER_GID</code>: The GID (Group ID) of the user.</p> </li> <li> <p><code>SUDO_USER</code>: The user who is granted sudo rights.</p> </li> <li> <p><code>SUDO_UID</code>: The UID of the user with sudo rights.</p> </li> <li> <p><code>SUDO_GID</code>: The GID of the user with sudo rights.</p> </li> <li> <p><code>USER_SSH_PUBKEY</code>: The public SSH key of the user.</p> </li> <li> <p><code>USER_SSH_PRIVKEY</code>: The private SSH key of the user.</p> </li> <li> <p><code>USER_SSH_KNOWNHOSTS</code>: The file that lists all hosts the user has connected to via SSH.</p> </li> <li> <p><code>USER_GPG_PUBKEY</code>: The public GPG key of the user.</p> </li> <li> <p><code>USER_GPG_PRIVKEY</code>: The private GPG key of the user.</p> </li> <li> <p><code>USER_GPG_KNOWNKEYS</code>: The file that lists all keys the user has added to their GPG keyring.</p> </li> <li> <p><code>USER_VAULT_TOKEN</code>: The user's authentication token for HashiCorp's Vault.</p> </li> <li> <p><code>USER_VAULT_ADDR</code>: The address of the Vault server the user is connecting to.</p> </li> <li> <p><code>USER_VAULT_SSH_PRIVKEY</code>: The private SSH key for the Vault.</p> </li> <li> <p><code>USER_VAULT_SSH_PUBKEY</code>: The public SSH key for the Vault.</p> </li> <li> <p><code>USER_VAULT_SSH_KNOWNHOSTS</code>: The file that lists all hosts the user has connected to via Vault's SSH.</p> </li> </ul> <p>Please note that some of these might be specific to your configuration and use case, and they might not be present in other dotfiles setups.</p>"},{"location":"usage/github/","title":"GitHub","text":"<p>There are a few helper scripts that can be used to make the process of setting up and using GitHub easier. These scripts are installed in the process of setting up <code>dotfiles</code> and can be found in the <code>.local/bin</code> directory.</p>"},{"location":"usage/github/#github-auth-option","title":"<code>github-auth [OPTION]</code>","text":"<p>The <code>github-auth</code> script is a utility for logging in to GitHub and configuring Git authentication using the GitHub CLI (<code>gh</code>).</p> <p>To use the script, simply run the following command:</p> <pre><code>github-auth\n</code></pre> <p>Optionally, you can use the <code>--interactive</code> or <code>-i</code> flag to run the script in interactive mode:</p> <pre><code>github-auth --interactive\n</code></pre> <p>The script performs the following actions:</p> <ol> <li>Determines if the script should run in interactive mode based on the provided flag.</li> <li>Checks if the <code>GITHUB_USERNAME</code> environment variable is set. If not, it skips the GitHub authentication process.</li> <li>Checks if the <code>gh</code> (GitHub CLI) command is installed. If not, it skips the GitHub authentication process.</li> <li>Configures the Git protocol to use HTTPS for GitHub.</li> <li>If in interactive mode, logs in to GitHub using <code>gh auth login</code>. If not in interactive mode, logs in using the provided <code>GITHUB_TOKEN</code> environment variable.</li> </ol> <p>Note: Before running the script, make sure you have the GitHub CLI (<code>gh</code>) installed. To install it, follow the instructions at https://github.com/cli/cli#installation.</p>"},{"location":"usage/github/#dotfiles-setup-github-keys","title":"<code>dotfiles-setup-github-keys</code>","text":"<p>The <code>dotfiles-setup-github-keys</code> script is a utility for adding your SSH and GPG keys to your GitHub account, assuming you have already authenticated using the <code>gh</code> (GitHub CLI) tool.</p> <p>To use the script, simply run the following command:</p> <pre><code>dotfiles-setup-github-keys\n</code></pre> <p>The script performs the following actions:</p> <ol> <li>Checks if the <code>GITHUB_USERNAME</code> environment variable is set. If not, it skips the GitHub authentication process.</li> <li>Checks if the <code>gh</code> (GitHub CLI) command is installed and if you are authenticated to GitHub.</li> <li>If authenticated, it attempts to add your SSH key to your GitHub account, if not already added.</li> <li>If your GPG public key file exists, it provides instructions for manually adding your GPG key to your GitHub account, as the GitHub CLI does not currently support this functionality.</li> </ol> <p>Note: Before running the script, make sure you have the GitHub CLI (<code>gh</code>) installed and authenticated. To install it, follow the instructions at https://github.com/cli/cli#installation, and to authenticate, use the <code>github-auth</code> script described in a previous section or refer to the <code>gh</code> documentation.</p>"},{"location":"usage/pass/","title":"Pass and Passage","text":"<p>There are a few helper scripts that can be used to make <code>pass</code> and <code>passage</code> more convenient to use. These scripts are installed in the process of setting up <code>dotfiles</code> and can be found in the <code>.local/bin</code> directory.</p>"},{"location":"usage/pass/#pass-clone","title":"<code>pass-clone</code>","text":"<p>The <code>pass-clone</code> script is a simple utility to clone or update the <code>pass</code> and <code>passage</code> repositories, which are used for managing password-store and passage directories, respectively.</p> <p>To use the script, simply run the following command:</p> <pre><code>pass-clone\n</code></pre> <p>The script will perform the following actions:</p> <ol> <li>If the <code>pass</code> feature is enabled: a. Check if the password-store directory exists. b. If it exists, prompt the user to remove the existing directory. c. If the user confirms, remove the directory. d. Clone the <code>pass</code> repository to the password-store directory.</li> <li>If the <code>passage</code> feature is enabled: a. Check if the passage directory exists. b. If it exists, prompt the user to remove the existing directory. c. If the user confirms, remove the directory. d. Clone the <code>passage</code> repository to the passage directory.</li> </ol> <p>Note: For private repositories, GitHub authentication is required to clone or update them.</p>"},{"location":"usage/pass/#pass-init","title":"<code>pass-init</code>","text":"<p>The <code>pass-init</code> script is a utility for initializing and configuring the <code>pass</code> password manager. It sets up the necessary environment variables, initializes the <code>pass</code> storage directory, and configures the remote Git repository for synchronization.</p> <p>To use the script, simply run the following command:</p> <pre><code>pass-init\n</code></pre> <p>The script will perform the following actions:</p> <ol> <li>Check if the password-store directory and the <code>.gpg-id</code> file exist.</li> <li>If the <code>.gpg-id</code> file doesn't exist or the <code>PASSWORD_STORE_KEY</code> environment variable is different from the one in the <code>.gpg-id</code> file, initialize or reinitialize <code>pass</code>.</li> <li>If the Git repository is not initialized in the password-store directory, initialize it.</li> <li>If the remote Git repository is not set, set it to the <code>PASS_REPO</code> environment variable.</li> <li>If GitHub authentication is available, fetch and checkout the main branch, set the upstream, and pull the changes.</li> </ol> <p>Note: Before running the script, ensure you have generated a GPG key and set the <code>PASSWORD_STORE_KEY</code> environment variable. Additionally, set the <code>PASS_REPO</code> environment variable to the remote pass repository URL. For private repositories, GitHub authentication is required.</p>"},{"location":"usage/pass/#passage-init","title":"<code>passage-init</code>","text":"<p>The <code>passage-init</code> script is a utility for initializing and configuring the <code>passage</code> password manager. It ensures <code>passage</code> is installed, sets up the necessary environment variables, initializes the <code>passage</code> storage directory, and configures the remote Git repository for synchronization.</p> <p>To use the script, simply run the following command:</p> <pre><code>passage-init\n</code></pre> <p>The script will perform the following actions:</p> <ol> <li>Check if <code>passage</code> is installed; if not, clone the <code>PASSAGE_SHARE_REPO</code> and install <code>passage</code>.</li> <li>Check if the <code>AGE_KEY_FILE</code> exists; if not, prompt the user to generate an age key using <code>age-keygen</code>.</li> <li>If the <code>PASSAGE_DIR</code> directory doesn't exist, create it.</li> <li>If the Git repository is not initialized in the <code>PASSAGE_DIR</code>, initialize it.</li> <li>If the remote Git repository is not set, set it to the <code>PASSAGE_REPO</code> environment variable.</li> <li>If GitHub authentication is available, fetch and checkout the main branch, set the upstream, and pull the changes.</li> </ol> <p>Note: Before running the script, ensure you have generated an age key and set the <code>AGE_KEY_FILE</code> environment variable. Additionally, set the <code>PASSAGE_REPO</code> environment variable to the remote passage repository URL. For private repositories, GitHub authentication is required.</p>"},{"location":"usage/pass/#pass-insert","title":"<code>pass-insert</code>","text":"<p>The <code>pass-insert</code> script is a utility for inserting or updating passwords in both <code>pass</code> and <code>passage</code> password managers. It checks whether the specified password entry exists in each manager, and if not, it inserts the provided password or prompts the user to enter one. If the entry exists, it updates the password if the provided password is different from the existing one.</p> <p>To use the script, run the following command:</p> <pre><code>pass-insert pass-name [password]\n</code></pre> <p>Arguments:</p> <ul> <li><code>pass-name</code>: The name of the password entry (required).</li> <li><code>password</code>: The password to insert or update (optional).</li> </ul> <p>The script performs the following actions:</p> <ol> <li>Checks if <code>pass</code> and <code>passage</code> are installed and initialized.</li> <li>If <code>pass</code> is installed and initialized, it checks whether the specified <code>pass-name</code> exists in the password store.</li> <li>If the entry exists and the provided password is different, it updates the password.</li> <li>If the entry doesn't exist, it inserts the provided password or prompts the user to enter one.</li> <li>If <code>passage</code> is installed and initialized, it checks whether the specified <code>pass-name</code> exists in the passage store.</li> <li>If the entry exists and the provided password is different, it updates the password.</li> <li>If the entry doesn't exist, it inserts the provided password or prompts the user to enter one.</li> </ol> <p>Note: Ensure that both <code>pass</code> and <code>passage</code> are installed and initialized before using the script. Also, set the <code>AGE_KEY_FILE</code> environment variable to the age key file path.</p>"},{"location":"usage/pass/#pass-rm","title":"<code>pass-rm</code>","text":"<p>The <code>pass-rm</code> script is a utility for removing password entries from both <code>pass</code> and <code>passage</code> password managers. It checks whether the specified password entry exists in each manager, and if so, it removes the entry according to the provided options.</p> <p>To use the script, run the following command:</p> <pre><code>pass-rm [--recursive,-r] [--force,-f] pass-name\n</code></pre> <p>Arguments:</p> <ul> <li><code>--recursive, -r</code>: Optional flag to remove a directory and its contents recursively.</li> <li><code>--force, -f</code>: Optional flag to force the removal without confirmation.</li> <li><code>pass-name</code>: The name of the password entry to remove (required).</li> </ul> <p>The script performs the following actions:</p> <ol> <li>Parses options and extracts the <code>pass-name</code>.</li> <li>Checks if <code>pass</code> and <code>passage</code> are installed.</li> <li>If <code>pass</code> is installed, it checks whether the specified <code>pass-name</code> exists in the password store.</li> <li>If the entry exists, it removes the entry according to the provided options.</li> <li>If the entry doesn't exist, it logs an information message.</li> <li>If <code>passage</code> is installed, it checks whether the specified <code>pass-name</code> exists in the passage store.</li> <li>If the entry exists, it removes the entry according to the provided options.</li> <li>If the entry doesn't exist, it logs an information message.</li> </ol> <p>Note: Ensure that both <code>pass</code> and <code>passage</code> are installed before using the script.</p>"},{"location":"usage/pass/#pass-pull","title":"<code>pass-pull</code>","text":"<p>The <code>pass-pull</code> script is a utility for pulling changes from remote repositories for both <code>pass</code> and <code>passage</code> password managers. It checks whether the password managers are initialized and have remote repositories set, and if so, it pulls the changes from the remote repositories.</p> <p>To use the script, simply run the following command:</p> <pre><code>pass-pull\n</code></pre> <p>The script performs the following actions:</p> <ol> <li>Checks if GitHub is authenticated. If not, it logs an information message and exits.</li> <li>Checks if the <code>PASSWORD_STORE_DIR</code> is set and has a <code>.gpg-id</code> file for <code>pass</code>.</li> <li>If the directory exists and has a remote repository set, it pulls changes from the remote repository.</li> <li>If the directory doesn't exist or the remote is not set, it logs an information message.</li> <li>Checks if the <code>PASSAGE_DIR</code> is set and has the <code>AGE_KEY_FILE</code> for <code>passage</code>.</li> <li>If the directory exists and has a remote repository set, it pulls changes from the remote repository.</li> <li>If the directory doesn't exist or the remote is not set, it logs an information message.</li> </ol> <p>Note: Ensure that you have authenticated with GitHub and both <code>pass</code> and <code>passage</code> are initialized before using the script.</p>"},{"location":"usage/pass/#pass-push","title":"<code>pass-push</code>","text":"<p>The <code>pass-push</code> script is a utility for committing and pushing changes to remote repositories for both <code>pass</code> and <code>passage</code> password managers. It checks whether the password managers are initialized and have remote repositories set, and if so, it commits and pushes the changes to the remote repositories.</p> <p>To use the script, simply run the following command:</p> <pre><code>pass-push\n</code></pre> <p>The script performs the following actions:</p> <ol> <li>Checks if the <code>PASSWORD_STORE_DIR</code> is set and has a <code>.gpg-id</code> file for <code>pass</code>.</li> <li>If the directory exists and has a remote repository set, it commits changes and pushes them to the remote repository.</li> <li>If the directory doesn't exist or the remote is not set, it logs an information message.</li> <li>Checks if the <code>PASSAGE_DIR</code> is set and has the <code>AGE_KEY_FILE</code> for <code>passage</code>.</li> <li>If the directory exists and has a remote repository set, it commits changes and pushes them to the remote repository.</li> <li>If the directory doesn't exist or the remote is not set, it logs an information message.</li> </ol> <p>Note: Ensure that both <code>pass</code> and <code>passage</code> are initialized before using the script.</p>"},{"location":"usage/pass/#pass-sync","title":"<code>pass-sync</code>","text":"<p>The <code>pass-sync</code> script is a utility for synchronizing passwords between the <code>pass</code> and <code>passage</code> password managers. It checks whether both password managers are initialized and then performs a bidirectional sync between them.</p> <p>To use the script, simply run the following command:</p> <pre><code>pass-sync\n</code></pre> <p>The script performs the following actions:</p> <ol> <li>Checks if the <code>PASSWORD_STORE_DIR</code> is set and has a <code>.gpg-id</code> file for <code>pass</code>. If not, it logs an information message and exits.</li> <li>Checks if the <code>PASSAGE_DIR</code> is set and has the <code>AGE_KEY_FILE</code> for <code>passage</code>. If not, it logs an information message and exits.</li> <li>Syncs from <code>pass</code> to <code>passage</code>:</li> <li>Iterates through all password entries in the <code>pass</code> password store.</li> <li>If an entry does not exist in the <code>passage</code> store, it inserts the entry into the <code>passage</code> store.</li> <li>Syncs from <code>passage</code> to <code>pass</code>:</li> <li>Iterates through all password entries in the <code>passage</code> password store.</li> <li>If an entry does not exist in the <code>pass</code> store, it inserts the entry into the <code>pass</code> store.</li> </ol> <p>Note: Ensure that both <code>pass</code> and <code>passage</code> are initialized before using the script.</p>"},{"location":"usage/sops/","title":"SOPS","text":"<p>SOPS (Secrets OPerationS) is an open-source text file editor designed to automate the process of encrypting and decrypting files. It provides an integrated workflow, allowing users to seamlessly manage sensitive data without the need for multiple tools. By combining the functionality of a text editor and an encryption/decryption tool, SOPS streamlines the process of securing your files.</p> <p>In addition to its simplicity and automation, SOPS boasts compatibility with various encryption methods, such as AGE, GPG, AWS KMS, GCP KMS, and HashiCorp Vault. This flexibility makes it an ideal choice for a wide range of applications and environments.</p> <p>In this tutorial, we will explore the core features and advantages of SOPS, and demonstrate how it can simplify the process of managing and editing encrypted files.</p>"},{"location":"usage/sops/#usage","title":"Usage","text":""},{"location":"usage/sops/#step-1-installing-sops","title":"Step 1: Installing SOPS","text":"<p>To install SOPS on macOS, you can use Homebrew:</p> <pre><code>brew install sops\n</code></pre> <p>For other operating systems, refer to the official SOPS GitHub repository for installation instructions.</p>"},{"location":"usage/sops/#step-2-configuring-sops","title":"Step 2: Configuring SOPS","text":""},{"location":"usage/sops/#choosing-an-encryption-method","title":"Choosing an encryption method","text":"<p>SOPS supports various encryption methods, including:</p> <ul> <li>AGE</li> <li>GPG</li> <li>AWS KMS</li> <li>GCP KMS</li> <li>HashiCorp Vault</li> </ul> <p>For this tutorial, we'll use AGE as our encryption method. You can follow similar steps for other methods based on your requirements.</p>"},{"location":"usage/sops/#generating-an-age-key-pair","title":"Generating an AGE key pair","text":"<p>First, we need to generate an AGE key pair if you don't already have one. You can use the <code>age-keygen</code> command to generate a key pair:</p> <pre><code>age-keygen -o age_key.txt\n</code></pre> <p>This command will create an <code>age_key.txt</code> file containing both your public and private keys. Make sure to keep your private key secure, as it will be needed for decryption.</p>"},{"location":"usage/sops/#configuring-sops_age_recipients","title":"Configuring SOPS_AGE_RECIPIENTS","text":"<p>Next, set the <code>SOPS_AGE_RECIPIENTS</code> environment variable to the public key generated earlier. Replace <code>&lt;public_key&gt;</code> with your actual public key:</p> <pre><code>export SOPS_AGE_RECIPIENTS=\"&lt;public_key&gt;\"\n</code></pre> <p>Now, SOPS is configured to use AGE encryption with your public key.</p>"},{"location":"usage/sops/#step-3-encrypting-a-file-with-sops","title":"Step 3: Encrypting a file with SOPS","text":"<p>To encrypt a file with SOPS, use the following command:</p> <pre><code>sops --encrypt my_file.txt &gt; my_file.sops.txt\n</code></pre> <p>Replace <code>my_file.txt</code> with the name of the file you want to encrypt. The encrypted file will be saved as <code>my_file.sops.txt</code>.</p>"},{"location":"usage/sops/#step-4-decrypting-a-file-with-sops","title":"Step 4: Decrypting a file with SOPS","text":"<p>To decrypt an encrypted file, use the following command:</p> <pre><code>sops --decrypt my_file.sops.txt &gt; my_file_decrypted.txt\n</code></pre> <p>Replace <code>my_file.sops.txt</code> with the name of the encrypted file. The decrypted file will be saved as <code>my_file_decrypted.txt</code>.</p>"},{"location":"usage/sops/#socrypt-a-helper-script-for-sops","title":"<code>socrypt</code>: A helper script for SOPS","text":"<p>The <code>socrypt</code> script is a helper script for SOPS that simplifies the process of encrypting and decrypting files. The script is installed in the process of setting up <code>dotfiles</code> and can be found in the <code>.local/bin</code> directory.</p> <p>You can use the script to encrypt and decrypt files using SOPS and AGE:</p> <ul> <li>To encrypt a file: <code>socrypt my_file.txt</code></li> <li>To decrypt a file: <code>socrypt --decrypt my_file.sops.txt</code></li> </ul> <p>The script also supports useful aliases for easier usage:</p> <pre><code>alias socrypt-inplace=\"socrypt --inplace\"\nalias senc=\"socrypt\"\nalias senci=\"socrypt-inplace\"\nalias sdecf=\"socrypt --decrypt\"\nalias sdec=\"sops --decrypt\"\n</code></pre> <p>You can add these aliases to your <code>~/.bashrc</code> or <code>~/.zshrc</code> file for persistent use. If you use <code>dotfiles</code>, these aliases are already set up for you.</p>"},{"location":"usage/sops/#additional-tips","title":"Additional Tips","text":""},{"location":"usage/sops/#using-sops-with-a-text-editor","title":"Using SOPS with a text editor","text":"<p>You can use SOPS with your favorite text editor, such as Visual Studio Code, by setting the <code>$EDITOR</code> environment variable. For example, to use VSCode, add the following line to your <code>~/.bashrc</code> or <code>~/.zshrc</code> file:</p> <pre><code>export EDITOR=\"code --wait\"\n</code></pre> <p>Now, when you run the <code>sops</code> command to edit a file, it will open the file in VSCode.</p>"},{"location":"usage/sops/#encrypting-and-decrypting-file-contents-directly","title":"Encrypting and decrypting file contents directly","text":"<p>If you need to encrypt or decrypt the contents of a file without creating a new file, you can use the <code>sops</code> command with input/output redirection. For example:</p> <ul> <li>To encrypt a file in-place: <code>sops --encrypt my_file.txt | sponge my_file.txt</code></li> <li>To decrypt a file in-place: <code>sops --decrypt my_file.sops.txt | sponge my_file.sops.txt</code></li> </ul> <p>Note that you'll need to install the <code>sponge</code> command, which is part of the <code>moreutils</code> package, to use this method.</p>"},{"location":"usage/sops/#encrypting-and-decrypting-specific-file-formats","title":"Encrypting and decrypting specific file formats","text":"<p>SOPS supports encrypting and decrypting specific file formats, such as JSON and YAML, with additional features like preserving comments and formatting. To use SOPS with a specific file format, specify the <code>--input-type</code> and <code>--output-type</code> options:</p> <ul> <li>To encrypt a JSON file: <code>sops --encrypt --input-type json --output-type json my_file.json &gt; my_file.sops.json</code></li> <li>To decrypt a JSON file: <code>sops --decrypt --input-type json --output-type json my_file.sops.json &gt; my_file_decrypted.json</code></li> </ul>"},{"location":"usage/sops/#conclusion","title":"Conclusion","text":"<p>By using SOPS, you can manage and edit sensitive files in a secure and flexible way, protecting your data from unauthorized access.</p>"},{"location":"usage/ssh-gpg-age/","title":"SSH, GPG, and AGE","text":"<p>There are a few helper scripts that can be used to make the process of setting up and using SSH, GPG, and AGE easier. These scripts are installed in the process of setting up <code>dotfiles</code> and can be found in the <code>.local/bin</code> directory.</p>"},{"location":"usage/ssh-gpg-age/#dotfiles-setup-ssh","title":"<code>dotfiles-setup-ssh</code>","text":"<p>The <code>dotfiles-setup-ssh</code> script is a utility for setting up SSH keys, configuring git for GPG signing, and managing SSH-related files.</p> <p>To use the script, simply run the following command:</p> <pre><code>dotfiles-setup-ssh\n</code></pre> <p>The script performs the following actions:</p> <ol> <li>Creates the <code>${SSH_HOME}</code> directory if it does not exist.</li> <li>Generates an SSH key with the specified algorithm and email if <code>${SSH_KEY_FILE}</code> does not exist; otherwise, changes the SSH key file permissions to <code>600</code>.</li> <li>Copies the SSH config file to <code>${SSH_CONFIG_FILE}</code> if it does not exist.</li> <li>Copies the gitconfig file to the <code>.gitconfig</code> file in the home directory.</li> <li>Adds the SSH key to the <code>allowed_signers</code> and <code>authorized_keys</code> files, and configures git for GPG signing using the SSH key.</li> <li>For macOS, adds the SSH key to the macOS keychain.</li> <li>Refreshes the <code>ssh-agent</code> to load new keys if the <code>ssh-agent</code> command is available.</li> </ol> <p>Note: Before running the script, make sure you have the necessary dependencies and configurations in place.</p>"},{"location":"usage/ssh-gpg-age/#dotfiles-setup-age","title":"<code>dotfiles-setup-age</code>","text":"<p>The <code>dotfiles-setup-age</code> script is a utility for setting up the Age encryption tool, generating Age keys, and managing Age-related files.</p> <p>To use the script, simply run the following command:</p> <pre><code>dotfiles-setup-age\n</code></pre> <p>The script performs the following actions:</p> <ol> <li>Ensures that <code>${HOME}/.local/bin</code>, <code>${GOROOT}/bin</code>, and <code>${GOPATH}/bin</code> are included in the PATH variable.</li> <li>Creates the <code>${SSH_HOME}</code> directory if it does not exist.</li> <li>Generates an Age key using <code>age-keygen</code> if <code>${AGE_KEY_FILE}</code> does not exist.</li> <li>Adds the Age key (AGE_RECIPIENT) to the <code>authorized_age_keys</code> file, or creates the file with the key if it does not exist.</li> </ol> <p>Note: Before running the script, make sure you have the Age encryption tool installed. If it is not installed, the script will prompt you to install it manually.</p>"},{"location":"usage/ssh-gpg-age/#dotfiles-setup-gpg-option","title":"<code>dotfiles-setup-gpg [OPTION]</code>","text":"<p>The <code>dotfiles-setup-gpg</code> script is a utility for setting up and managing GPG keys, as well as exporting GPG public and private keys.</p> <p>To use the script, simply run the following command:</p> <pre><code>dotfiles-setup-gpg\n</code></pre> <p>Optionally, you can use the <code>--interactive</code> or <code>-i</code> flag to run the script in interactive mode:</p> <pre><code>dotfiles-setup-gpg --interactive\n</code></pre> <p>The script performs the following actions:</p> <ol> <li>Determines if the script should run in interactive mode based on the provided flag.</li> <li>Sets the necessary environment variables and exports them.</li> <li>Creates the <code>${SSH_HOME}</code> directory if it does not exist.</li> <li>Checks if the GPG public key and private key are valid and imported. If not, it imports them.</li> <li>Generates a new GPG key if none exists, exports the public and private keys, and saves them to respective files.</li> <li>Saves the GPG key ID to a file if it's different or if the file doesn't exist.</li> <li>(Optional) Adds the GPG key to the Git configuration and enables commit signing if the <code>GPGSIGN</code> variable is set to \"true\".</li> </ol> <p>Note: Before running the script, make sure you have the GPG encryption tool installed.</p>"},{"location":"usage/update/","title":"Update","text":"<p>The Dotfiles project includes a convenient update script that automatically checks for and applies updates to your dotfiles. To run the update script, you can simply execute <code>dotfiles-update</code> from your terminal, or use the alias <code>dotu</code>. This script offers various features, such as:</p> <ol> <li> <p>Prerelease flag support: You can pass the <code>--prerelease</code> or <code>-p</code> flag to the script to update to the latest prerelease version of your dotfiles.</p> </li> <li> <p>GitHub CLI integration: If you have the GitHub CLI (<code>gh</code>) installed and authenticated, the script will automatically set up Git authentication for your dotfiles.</p> </li> <li> <p>Chezmoi integration: If Chezmoi is installed, the script will compare the local and remote tags and apply updates if the local version is behind the remote version. Chezmoi will initialize and apply the updates accordingly.</p> </li> <li> <p>Dotdrop integration: If Dotdrop is installed, the script will update the dotfiles using the Dotdrop configuration file.</p> </li> <li> <p>Dockerfiles repo updates: The script also updates the Dockerfiles repo, ensuring that you have the latest versions of your Dockerfiles.</p> </li> <li> <p>Password store updates: The script will update your <code>pass</code> and <code>passage</code> stores, ensuring that your password data is up-to-date.</p> </li> <li> <p>Autorestic backups: If Autorestic is enabled, the script will perform a backup of your important files after updating the dotfiles.</p> </li> </ol> <p>To update your dotfiles, simply run the <code>dotfiles-update</code> script or its alias <code>dotu</code>. This will ensure that your development environment stays up-to-date with the latest changes and improvements to your dotfiles, making your workflow even more efficient and enjoyable.</p>"}]}