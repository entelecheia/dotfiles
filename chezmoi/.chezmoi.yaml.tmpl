# {{- $chezmoiForce := or (has "--force" .chezmoi.args) (has "--force=true" .chezmoi.args) -}}
# {{- $interactive := and stdinIsATTY (not $chezmoiForce) -}}
# {{- $ubuntu := hasKey .chezmoi.osRelease "ubuntuCodename" -}}
# {{- $wsl := or (env "WSL_DISTRO_NAME") (env "IS_WSL") | not | not -}}
# {{- $devcontainer := or (env "REMOTE_CONTAINERS") (env "CODESPACES") (env "VSCODE_REMOTE_CONTAINERS_SESSION") (env "GITPOD_HOST") | not | not -}}
# {{- $gnome := lookPath "gnome-shell" | not | not -}}
# {{- $cpuCores := 1 -}}
# {{- $cpuThreads := 1 -}}
# {{- if eq .chezmoi.os "darwin" -}}
# {{-   $cpuCores = (output "sysctl" "-n" "hw.physicalcpu_max") | trim | atoi -}}
# {{-   $cpuThreads = (output "sysctl" "-n" "hw.logicalcpu_max") | trim | atoi -}}
# {{- else if eq .chezmoi.os "linux" -}}
# {{-   $cpuCores = (output "sh" "-c" "lscpu --online --parse | grep --invert-match '^#' | sort --field-separator=',' --key='2,4' --unique | wc --lines") | trim | atoi -}}
# {{-   $cpuThreads = (output "sh" "-c" "lscpu --online --parse | grep --invert-match '^#' | wc --lines") | trim | atoi -}}
# {{- else if eq .chezmoi.os "windows" -}}
# {{-   $cpuCores = (output "powershell.exe" "-NoProfile" "-NonInteractive" "-Command" "(Get-CimInstance -ClassName 'Win32_Processor').NumberOfCores") | trim | atoi -}}
# {{-   $cpuThreads = (output "powershell.exe" "-NoProfile" "-NonInteractive" "-Command" "(Get-CimInstance -ClassName 'Win32_Processor').NumberOfLogicalProcessors") | trim | atoi -}}
# {{- end -}}

# {{- $minimum := $devcontainer -}}
# {{- if and (hasKey . "system") (hasKey .system "is_minimum") -}}
# {{-   $minimum = .system.is_minimum -}}
# {{- else -}}
# {{-   if eq (env "DOTFILES_MINIMUM") "true" "True" "TRUE" "1" -}}
# {{-     $minimum = true -}}
# {{-   end -}}
# {{- end -}}

# {{- $auto_update := false -}}
# {{- if and (hasKey . "system") (hasKey .system "auto_update") -}}
# {{-   $auto_update = .system.auto_update -}}
# {{- end -}}
# {{- if eq (env "DOTFILES_AUTO_UPDATE") "true" "True" "TRUE" "1" -}}
# {{-   $auto_update = true -}}
# {{- else if eq (env "DOTFILES_AUTO_UPDATE") "false" "False" "FALSE" "0" -}}
# {{-   $auto_update = false -}}
# {{- end -}}

# {{- $upgrade_packages := false -}}
# {{- if and (hasKey . "system") (hasKey .system "upgrade_packages") -}}
# {{-   $upgrade_packages = .system.upgrade_packages -}}
# {{- else -}}
# {{-   if eq (env "DOTFILES_UPGRADE_PACKAGES") "true" "True" "TRUE" "1" -}}
# {{-     $upgrade_packages = true -}}
# {{-   end -}}
# {{- end -}}

# {{- $verbose := false -}}
# {{- if and (hasKey . "system") (hasKey .system "verbose") -}}
# {{-   $verbose = .system.verbose | not | not -}}
# {{- else -}}
# {{-   if eq (env "DOTFILES_VERBOSE") "true" "True" "TRUE" "1" -}}
# {{-     $verbose = true -}}
# {{-   end -}}
# {{- end -}}

# {{- $apply_rootmoi := true -}}
# {{- if and (hasKey . "system") (hasKey .system "apply_rootmoi") -}}
# {{-   $apply_rootmoi = .system.apply_rootmoi -}}
# {{- else -}}
# {{-   if eq (env "DOTFILES_APPLY_ROOTMOI") "false" "False" "FALSE" "0" -}}
# {{-     $apply_rootmoi = false -}}
# {{-   end -}}
# {{- end -}}

# {{- $sudoer := false -}}
# {{- if eq (env "DOTFILES_SUDOER") "true" "True" "TRUE" "1" -}}
# {{-   $sudoer = true -}}
# {{- end -}}

# {{- if not $sudoer -}}
# {{-   $sudo_check := "" -}}
# {{-   if eq .chezmoi.os "linux" -}}
# {{-     $sudo_check = (output "sh" "-c" (printf "grep -q \"^sudo:.*%s\\([,].*\\)\\?$\" /etc/group && echo sudo || echo false" .chezmoi.username)) | trim -}}
# {{-   else -}}
# {{-     $sudo_check = (output "sh" "-c" "test -n \"$(groups | grep -w admin)\" && echo sudo || echo false") | trim -}}
# {{-   end -}}
# {{-   if or (eq $sudo_check "sudo") (eq .chezmoi.username "root") ($wsl) -}}
# {{-     $sudoer = true -}}
# {{-   else -}}
# {{-     $sudoer = false -}}
# {{-   end -}}
# {{- end -}}

# {{- if not $sudoer -}}
# {{-   $apply_rootmoi = false -}}
# {{- end -}}

# {{- $name:= or (env "USER_FULLNAME") "Your Name" -}}
# {{- if and (hasKey . "name") .name -}}
# {{-   $name = .name -}}
# {{- end -}}

# {{- $github_username := env "GITHUB_USERNAME" -}}
# {{- if and (hasKey . "github") (hasKey .github "username") .github.username -}}
# {{-   $github_username = .github.username -}}
# {{- end -}}

# {{- $docker_username := env "DOCKER_USERNAME" -}}
# {{- if and (hasKey . "docker") (hasKey .docker "username") .docker.username -}}
# {{-   $docker_username = .docker.username -}}
# {{- end -}}

# {{- $email:= or (env "USER_EMAIL") "your_email@your.domain.com" -}}
# {{- if and (hasKey . "email") .email -}}
# {{-   $email = .email -}}
# {{- end -}}

# {{- $hostname := or (env "SYSTEM_HOSTNAME") .chezmoi.hostname -}}
# {{- if and (hasKey . "system") (hasKey .system "hostname") .system.hostname -}}
# {{-   $hostname = .system.hostname -}}
# {{- end -}}

# {{- $ssh_algorithm := "ed25519" -}}
# {{- if and (hasKey . "ssh") (hasKey .ssh "algorithm") .ssh.algorithm -}}
# {{-   $ssh_algorithm = .ssh.algorithm -}}
# {{- end -}}

# {{- $github_token := env "GITHUB_TOKEN" -}}
# {{- if and (hasKey . "github") (hasKey .github "token") .github.token -}}
# {{-   $github_token = .github.token -}}
# {{- end -}}

# {{- $gpg_passphrase := env "GPG_PASSPHRASE" -}}
# {{- if and (hasKey . "gnupg") (hasKey .gnupg "passphrase") -}}
# {{-   $gpg_passphrase = .gnupg.passphrase -}}
# {{- end -}}

# {{- $age_recipients:= or (env "AGE_RECIPIENTS") "" -}}
# {{- $ssh_homedir := or (joinPath .chezmoi.homeDir ".ssh") -}}
# {{- $gpg_homedir := or (env "GNUPGHOME") (joinPath .chezmoi.homeDir ".gnupg") -}}
# {{- $gpg_key_id_file := joinPath $ssh_homedir ".gpg-id" -}}
# {{- $gpg_key_id := env "GPG_KEY_ID" -}}
# {{- $git_commit_gpgsign := false -}}
# {{- if and (hasKey . "gnupg") (hasKey .gnupg "gitsign") -}}
# {{-   $git_commit_gpgsign = .gnupg.gitsign -}}
# {{- end -}}
# {{- if eq (env "GIT_COMMIT_GPGSIGN") "true" "True" "TRUE" "1" -}}
# {{-   $git_commit_gpgsign = true -}}
# {{- else if eq (env "GIT_COMMIT_GPGSIGN") "false" "False" "FALSE" "0" -}}
# {{-   $git_commit_gpgsign = false -}}
# {{- end -}}

# {{- $use_dotdrop := true -}}
# {{- if eq (env "DOTFILES_USE_DOTDROP") "false" "False" "FALSE" "0" -}}
# {{-   $use_dotdrop = false -}}
# {{- end -}}
# {{- $dotdrop_config_dir := or (env "DOTDROP_CONFIGDIR") (joinPath .chezmoi.homeDir ".config/dotdrop") -}}
# {{- $dotdrop_config_file := or (env "DOTDROP_CONFIG") (joinPath $dotdrop_config_dir "config-user.yaml") -}}
# {{- $dotdrop_root_config_file := or (env "DOTDROP_ROOT_CONFIG") (joinPath $dotdrop_config_dir "config-root.yaml") -}}

# {{- $dotdrop_repo := "" -}}
# {{- if and (hasKey . "dotdrop") (hasKey .dotdrop "repo") -}}
# {{-   $dotdrop_repo = .dotdrop.repo -}}
# {{- end -}}

# {{- $dotdrop_user_profile := or (env "DOTDROP_PROFILE") "user" -}}
# {{- if and (hasKey . "dotdrop") (hasKey .dotdrop "user_profile") -}}
# {{-   $dotdrop_user_profile = .dotdrop.user_profile -}}
# {{- end -}}

# {{- $dockerfiles_share_dir := joinPath .chezmoi.homeDir ".local/share/dockerfiles" -}}
# {{- $docker_global_env_filename := ".env.docker" -}}
# {{- $docker_secret_env_filename := ".env.secret" -}}
# {{- $docker_container_registry := "ghcr.io" -}}
# {{- $dockerfiles_repo := "https://github.com/entelecheia/dockerfiles.git" -}}
# {{- if and (hasKey . "docker") (hasKey .docker "repo") -}}
# {{-   $dockerfiles_repo = .docker.repo -}}
# {{- end -}}
# {{- if and (hasKey . "docker") (hasKey .docker "container_registry") -}}
# {{-   $docker_container_registry = .docker.container_registry -}}
# {{- end -}}

# {{- $workspace_location := "" -}}
# {{- $winhome := or (env "WINHOME") (output "sh" "-c" "command -v wslpath > /dev/null && command -v wslvar > /dev/null && wslpath $(wslvar USERPROFILE) || echo ''" | trim) -}}
# {{- if and $wsl ($winhome | not | not) -}}
# {{-   writeToStdout (printf "\n🪟 WSL detected, running with Windows Home directory: %s\n\n" $winhome) -}}
# {{-   $workspace_location = or (env "WORKSPACE_LOCATION") $winhome -}}
# {{- else -}}
# {{-   $workspace_location = or (env "WORKSPACE_LOCATION") .chezmoi.homeDir -}}
# {{- end -}}
# {{- $workspace_name := "workspace" -}}
# {{- $workspace_root := joinPath $workspace_location $workspace_name -}}
# {{- $workspace_home := $workspace_root -}}

# {{- $winhome_existing := "" -}}
# {{- $workspace_existing := "" -}}
# {{- if and (hasKey . "system") (hasKey .system "winhome") -}}
# {{-   $winhome_existing = .system.winhome -}}
# {{- end -}}
# {{- if and (hasKey . "workspace") (hasKey .workspace "location") -}}
# {{-   $workspace_existing = .workspace.location -}}
# {{- end -}}

# {{- $symlink_colab_workspace := false -}}
# {{- if not $sudoer -}}
# {{-   $symlink_colab_workspace = false -}}
# {{- else -}}
# {{-   if and (hasKey . "workspace") (hasKey .workspace "symlink_colab_workspace") -}}
# {{-     $symlink_colab_workspace = .workspace.symlink_colab_workspace -}}
# {{-   end -}}
# {{- end -}}
# {{- $symlink_to_home := true -}}
# {{- $winhome_symlink := joinPath .chezmoi.homeDir "winhome" -}}

# {{- $use_lfs_folderstore := false -}}
# {{- if eq (env "DOTFILES_USE_LFS_FOLDERSTORE") "true" "True" "TRUE" "1" -}}
# {{-   $use_lfs_folderstore = true -}}
# {{- end -}}
# {{- if and (hasKey . "lfs_folderstore") (hasKey .lfs_folderstore "enabled") -}}
# {{-   $use_lfs_folderstore = .lfs_folderstore.enabled -}}
# {{- end -}}
# {{- $lfs_folderstore_dir := joinPath .chezmoi.homeDir "workspace/lfs-folderstore" -}}
# {{- if and (hasKey . "lfs_folderstore") (hasKey .lfs_folderstore "store_dir") -}}
# {{-   $lfs_folderstore_dir = .lfs_folderstore.store_dir -}}
# {{- end -}}

# {{- $use_code := false -}}
# {{- if eq (env "DOTFILES_USE_CODE") "true" "True" "TRUE" "1" -}}
# {{-   $use_code = true -}}
# {{- end -}}
# {{- if and (hasKey . "code") (hasKey .code "enabled") -}}
# {{-   $use_code = .code.enabled -}}
# {{- end -}}

# {{- $python_version := or (env "DOTFILES_PYTHON_VERSION") "3.10" -}}
# {{- if and (hasKey . "python") (hasKey .python "version") .python.version -}}
# {{-   $python_version = .python.version -}}
# {{- end -}}

# {{- $use_python_tools := true -}}
# {{- if eq (env "DOTFILES_USE_PYTHON_TOOLS") "false" "False" "FALSE" "0" -}}
# {{-   $use_python_tools = false -}}
# {{- end -}}
# {{- $python_workon_home := or (env "WORKON_HOME") (joinPath .chezmoi.homeDir ".venvs") -}}

# {{- $use_rbenv := false -}}
# {{- if eq (env "DOTFILES_USE_RBENV") "true" "True" "TRUE" "1" -}}
# {{-   $use_rbenv = true -}}
# {{- end -}}
# {{- if and (hasKey . "ruby") (hasKey .code "rbenv_enabled") -}}
# {{-   $use_rbenv = .ruby.rbenv_enabled -}}
# {{- end -}}

# {{- $use_ngrok := false -}}
# {{- if eq (env "DOTFILES_USE_NGROK") "true" "True" "TRUE" "1" -}}
# {{-   $use_ngrok = true -}}
# {{- end -}}
# {{- $ngrok_authtoken := or (env "NGROK_AUTHTOKEN") "" -}}
# {{- if and (hasKey . "ngrok") (hasKey .ngrok "authtoken") -}}
# {{-   $ngrok_authtoken = .ngrok.authtoken -}}
# {{- end -}}
# {{- $ngrok_ssh_port := or (env "NGROK_SSH_PORT") "22" -}}
# {{- if and (hasKey . "ngrok") (hasKey .ngrok "ssh_port") -}}
# {{-   $ngrok_ssh_port = .ngrok.ssh_port -}}
# {{- end -}}
# {{- $ngrok_config_file := or (env "NGROK_CONFIG") (joinPath .chezmoi.homeDir ".config/ngrok/ngrok.yml") -}}

# {{- $use_cloudflared := false -}}
# {{- if eq (env "DOTFILES_USE_CLOUDFLARED") "true" "True" "TRUE" "1" -}}
# {{-   $use_cloudflared = true -}}
# {{- end -}}
# {{- if and (hasKey . "cloudflared") (hasKey .cloudflared "enabled") -}}
# {{-   $use_cloudflared = .cloudflared.enabled -}}
# {{- end -}}
# {{- $cloudflared_tunnel_uuid := or (env "CLOUDFLARED_TUNNEL_UUID") "" -}}
# {{- if and (hasKey . "cloudflared") (hasKey .cloudflared "tunnel_uuid") -}}
# {{-   $cloudflared_tunnel_uuid = .cloudflared.tunnel_uuid -}}
# {{- end -}}
# {{- $cloudflared_tunnel_name := or (env "CLOUDFLARED_TUNNEL_NAME") "" -}}
# {{- if and (hasKey . "cloudflared") (hasKey .cloudflared "tunnel_name") -}}
# {{-   $cloudflared_tunnel_name = .cloudflared.tunnel_name -}}
# {{- end -}}
# {{- $cloudflared_tunnel_hostname := or (env "CLOUDFLARED_TUNNEL_HOSTNAME") "" -}}
# {{- if and (hasKey . "cloudflared") (hasKey .cloudflared "tunnel_hostname") -}}
# {{-   $cloudflared_tunnel_hostname = .cloudflared.tunnel_hostname -}}
# {{- end -}}
# {{- $cloudflared_config_file := or (env "CLOUDFLARED_CONFIG") (joinPath .chezmoi.homeDir ".cloudflared/config.yml") -}}
# {{- $cloudflared_config_template := (joinPath .chezmoi.homeDir ".cloudflared/config.tmp") -}}
# {{- $cloudflared_credentials_file := "" -}}

# {{- $use_pass := true -}}
# {{- if eq (env "DOTFILES_USE_PASS") "false" "False" "FALSE" "0" -}}
# {{-   $use_pass = false -}}
# {{- end -}}
# {{- $pass_store_dir := or (env "PASSWORD_STORE_DIR") (joinPath .chezmoi.homeDir ".password-store") -}}
# {{- $pass_repo := or (env "PASS_REPO") "" -}}
# {{- if and (hasKey . "pass") (hasKey .pass "repo") -}}
# {{-   $pass_repo = .pass.repo -}}
# {{- end -}}

# {{- $use_passage := true -}}
# {{- if eq (env "DOTFILES_USE_PASSAGE") "false" "False" "FALSE" "0" -}}
# {{-   $use_passage = false -}}
# {{- end -}}
# {{- $passage_store_dir := or (env "PASSAGE_DIR") (joinPath .chezmoi.homeDir ".passage/store") -}}
# {{- $passage_repo := or (env "PASSAGE_REPO") "" -}}
# {{- $passage_share_dir := or (env "PASSAGE_SHARE_DIR") (joinPath .chezmoi.homeDir ".local/share/passage") -}}
# {{- if and (hasKey . "passage") (hasKey .passage "repo") -}}
# {{-   $passage_repo = .passage.repo -}}
# {{- end -}}

# {{- $use_doppler := true -}}
# {{- if eq (env "DOTFILES_USE_DOPPLER") "false" "False" "FALSE" "0" -}}
# {{-   $use_doppler = false -}}
# {{- end -}}
# {{- $doppler_token := or (env "DOPPLER_TOKEN") "" -}}
# {{- if and (hasKey . "doppler") (hasKey .doppler "token") -}}
# {{-   $doppler_token = .doppler.token -}}
# {{- end -}}

# {{- $use_1password := false -}}
# {{- if eq (env "DOTFILES_USE_1PASSWORD") "true" "True" "TRUE" "1" -}}
# {{-   $use_1password = true -}}
# {{- end -}}
# {{- $op_account := or (env "OP_ACCOUNT") "" -}}
# {{- $op_vault := or (env "OP_VAULT") "dev" -}}
# {{- $op_connect_host := or (env "OP_CONNECT_HOST") "" -}}
# {{- $op_connect_token := or (env "OP_CONNECT_TOKEN") "" -}}

# {{- $use_vault := false -}}
# {{- if eq (env "DOTFILES_USE_VAULT") "true" "True" "TRUE" "1" -}}
# {{-   $use_vault = true -}}
# {{- end -}}

# {{- $use_codecov := false -}}
# {{- if and (hasKey . "codecov") (hasKey .codecov "enabled") -}}
# {{-   $use_codecov = .codecov.enabled -}}
# {{- end -}}
# {{- if eq (env "DOTFILES_USE_CODECOV") "false" "False" "FALSE" "0" -}}
# {{-   $use_codecov = false -}}
# {{- else if eq (env "DOTFILES_USE_CODECOV") "true" "True" "TRUE" "1" -}}
# {{-   $use_codecov = true -}}
# {{- end -}}
# {{- $codecov_api_token := or (env "CODECOV_TOKEN") "" -}}
# {{- if and (hasKey . "codecov") (hasKey .codecov "api_token") -}}
# {{-   $codecov_api_token = .codecov.api_token -}}
# {{- end -}}

# {{- $use_sourcegraph := false -}}
# {{- if and (hasKey . "sourcegraph") (hasKey .sourcegraph "enabled") -}}
# {{-   $use_sourcegraph = .sourcegraph.enabled -}}
# {{- end -}}
# {{- if eq (env "DOTFILES_USE_SOURCEGRAPH") "false" "False" "FALSE" "0" -}}
# {{-   $use_sourcegraph = false -}}
# {{- else if eq (env "DOTFILES_USE_SOURCEGRAPH") "true" "True" "TRUE" "1" -}}
# {{-   $use_sourcegraph = true -}}
# {{- end -}}
# {{- $sourcegraph_access_token := or (env "SRC_ACCESS_TOKEN") "" -}}
# {{- if and (hasKey . "sourcegraph") (hasKey .sourcegraph "access_token") -}}
# {{-   $sourcegraph_access_token = .sourcegraph.access_token -}}
# {{- end -}}
# {{- $sourcegraph_endpoint := or (env "SRC_ENDPOINT") "" -}}
# {{- if and (hasKey . "sourcegraph") (hasKey .sourcegraph "endpoint") -}}
# {{-   $sourcegraph_endpoint = .sourcegraph.endpoint -}}
# {{- end -}}

# {{- $use_wakatime := false -}}
# {{- if and (hasKey . "wakatime") (hasKey .wakatime "enabled") -}}
# {{-   $use_wakatime = .wakatime.enabled -}}
# {{- end -}}
# {{- if eq (env "DOTFILES_USE_WAKATIME") "false" "False" "FALSE" "0" -}}
# {{-   $use_wakatime = false -}}
# {{- else if eq (env "DOTFILES_USE_WAKATIME") "true" "True" "TRUE" "1" -}}
# {{-   $use_wakatime = true -}}
# {{- end -}}
# {{- $wakatime_api_key := or (env "WAKATIME_API_KEY") "" -}}
# {{- if and (hasKey . "wakatime") (hasKey .wakatime "api_key") -}}
# {{-   $wakatime_api_key = .wakatime.api_key -}}
# {{- end -}}
# {{- $wakatime_zsh_project_detection := or (env "ZSH_WAKATIME_PROJECT_DETECTION") "true" -}}

# {{- $use_openai := false -}}
# {{- if and (hasKey . "openai") (hasKey .openai "enabled") -}}
# {{-   $use_openai = .openai.enabled -}}
# {{- end -}}
# {{- if eq (env "DOTFILES_USE_OPENAI") "false" "False" "FALSE" "0" -}}
# {{-   $use_openai = false -}}
# {{- else if eq (env "DOTFILES_USE_OPENAI") "true" "True" "TRUE" "1" -}}
# {{-   $use_openai = true -}}
# {{- end -}}
# {{- $openai_api_key := or (env "OPENAI_API_KEY") "" -}}
# {{- if and (hasKey . "openai") (hasKey .openai "api_key") -}}
# {{-   $openai_api_key = .openai.api_key -}}
# {{- end -}}

# {{- $use_autorestic := false -}}
# {{- if eq (env "DOTFILES_USE_AUTORESTIC") "true" "True" "TRUE" "1" -}}
# {{-   $use_autorestic = true -}}
# {{- end -}}
# {{- if and (hasKey . "autorestic") (hasKey .autorestic "enabled") -}}
# {{-   $use_autorestic = .autorestic.enabled -}}
# {{- end -}}
# {{- $autorestic_config_file := joinPath .chezmoi.homeDir ".config/autorestic/autorestic.yml" -}}
# {{- $autorestic_backup_dotfiles := true -}}
# {{- $autorestic_restore_dotfiles := true -}}
# {{- $autorestic_location := "dotfiles" -}}
# {{- $autorestic_restore_to := joinPath .chezmoi.homeDir ".local/backup/autorestic" -}}

# {{- $use_microk8s := false -}}
# {{- if eq (env "DOTFILES_USE_MICROK8S") "true" "True" "TRUE" "1" -}}
# {{-   $use_microk8s = true -}}
# {{- end -}}

# {{- $github_clones := "" -}}
# {{- if and (hasKey . "github") (hasKey .github "clones") -}}
# {{-   $github_clones = .github.clones -}}
# {{- end -}}

# {{- $dotfiles_version := or (env "DOTFILES_VERSION") "N/A" -}}
# {{- writeToStdout "---\n" -}}
# {{- writeToStdout "🖥️  Information found in your system environment variables:\n" -}}
# {{- if $sudoer -}}
# {{- writeToStdout (printf "🤖  DOTFILES CONFIGURATION (Version: %s) [for SUDOER]\n\n" $dotfiles_version) -}}
# {{- writeToStdout (printf "🦸  USER_FULLNAME: %s\n" $name) -}}
# {{- else -}}
# {{- writeToStdout (printf "🤖  DOTFILES CONFIGURATION (Version: %s) [for NON-SUDOER]\n\n" $dotfiles_version) -}}
# {{- writeToStdout (printf "👤  USER_FULLNAME: %s\n" $name) -}}
# {{- end -}}
# {{- writeToStdout (printf "📧  USER_EMAIL: %s\n" $email) -}}
# {{- writeToStdout (printf "🏠  SYSTEM_HOSTNAME: %s\n" $hostname) -}}
# {{- writeToStdout (printf "🐙  GITHUB_USERNAME: %s\n" $github_username) -}}
# {{- writeToStdout (printf "🐳  DOCKER_USERNAME: %s\n" $docker_username) -}}
# {{- writeToStdout (printf "📁  WORKSPACE_LOCATION: %s\n" $workspace_location) -}}
# {{- writeToStdout (printf "📎  DOTFILES_MINIMUM: %t\n" $minimum) -}}
# {{- writeToStdout (printf "🔐  DOTFILES_SUDOER: %t\n" $sudoer) -}}
# {{- if and (eq .chezmoi.os "linux") -}}
# {{- writeToStdout (printf "🦸  DOTFILES_APPLY_ROOTMOI: %t\n" $apply_rootmoi) -}}
# {{- end -}}
# {{- if $minimum | not -}}
# {{- writeToStdout (printf "💼  DOTFILES_USE_LFS_FOLDERSTORE: %t\n" $use_lfs_folderstore) -}}
# {{- writeToStdout (printf "📦  DOTFILES_USE_AUTORESTIC: %t\n" $use_autorestic) -}}
# {{- writeToStdout (printf "🔖  DOTFILES_USE_DOTDROP: %t\n" $use_dotdrop) -}}
# {{- writeToStdout (printf "🐍  DOTFILES_USE_PYTHON_TOOLS: %t\n" $use_python_tools) -}}
# {{- writeToStdout (printf "🔑  DOTFILES_USE_PASSAGE: %t\n" $use_passage) -}}
# {{- end -}}
# {{- writeToStdout (printf "🔬  DOTFILES_VERBOSE: %t\n" ($verbose | not | not)) -}}
# {{- writeToStdout "---\n" -}}

# {{- if $interactive -}}
# {{-   $question := "❔ Do you want to install in minimum mode (see README)" -}}
# {{-   $minimum = promptBool $question $minimum -}}
# {{- end -}}
# {{-   if $minimum -}}
# {{-     writeToStdout "✅  Minimum mode enabled\n" -}}
# {{-   else -}}
# {{-     writeToStdout "❎  Minimum mode disabled\n" -}}
# {{-   end -}}

# {{- if $interactive -}}
# {{-   $question := "❔ Do you want to update dotfiles automatically" -}}
# {{-   $auto_update = promptBool $question $auto_update -}}
# {{- end -}}
# {{- if $auto_update -}}
# {{-   writeToStdout "✅  Auto update enabled\n" -}}
# {{- else -}}
# {{-   writeToStdout "❎  Auto update disabled\n" -}}
# {{- end -}}

# {{- if $interactive -}}
# {{-   $question := "❔ Do you want to upgrade packages if needed" -}}
# {{-   $upgrade_packages = promptBool $question $upgrade_packages -}}
# {{- end -}}
# {{- if $upgrade_packages -}}
# {{-   writeToStdout "✅  Upgrade packages enabled\n" -}}
# {{- else -}}
# {{-   writeToStdout "❎  Upgrade packages disabled\n" -}}
# {{- end -}}

# {{- if $interactive -}}
# {{-   $question := "❔ Do you want to enable verbose mode" -}}
# {{-   $verbose = promptBool $question $verbose -}}
# {{- end -}}
# {{- if $verbose -}}
# {{-   writeToStdout "✅  Verbose mode enabled\n" -}}
# {{- else -}}
# {{-   writeToStdout "❎  Verbose mode disabled\n" -}}
# {{- end -}}

# {{- if eq .chezmoi.os "darwin" -}}
# {{-   $apply_rootmoi := false -}}
# {{- else if $sudoer -}}
# {{-   if $interactive -}}
# {{-       $question := "❔ Do you want to install dotfiles for the root user" -}}
# {{-       $apply_rootmoi = promptBool $question $apply_rootmoi -}}
# {{-   end -}}
# {{- else -}}
# {{-   $apply_rootmoi := false -}}
# {{- end -}}
# {{- if $apply_rootmoi -}}
# {{-   writeToStdout "✅  Dotfiles will be installed for the root user\n" -}}
# {{- else -}}
# {{-   writeToStdout "❎  Dotfiles will not be installed for the root user\n" -}}
# {{- end -}}

# {{- if $interactive -}}
# {{-   range $i := until 99 -}}
# {{-     $question := "❔ What is your full name" -}}
# {{-     $answer := "" -}}
# {{-     if $name -}}
# {{-       $answer = promptString $question $name -}}
# {{-     else -}}
# {{-       $answer = promptString $question -}}
# {{-     end -}}
# {{-     if regexMatch "^[A-Z][-' a-zA-Z]+$" $answer -}}
# {{-       $name = $answer -}}
# {{-       break -}}
# {{-     end -}}
# {{-     writeToStdout (printf "❌ '%s' is an invalid name\n" $answer) -}}
# {{-     if eq $i 98 -}}
# {{-       writeToStdout "❌ ERROR: maximum tries exceeded\n" -}}
# {{-       exit 1 -}}
# {{-     end -}}
# {{-   end -}}
# {{- end -}}
# {{- writeToStdout (printf "✅  Name set as '%s'\n" $name) -}}

# {{- if $interactive -}}
# {{-   $question := "❔ What is your GitHub username" -}}
# {{-   $answer := "" -}}
# {{-   if $github_username -}}
# {{-     $answer = promptString $question $github_username -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $github_username = $answer -}}
# {{- end -}}
# {{- if $github_username -}}
# {{-   writeToStdout (printf "✅  GitHub username set as '%s'\n" $github_username) -}}
# {{- else -}}
# {{-   writeToStdout "❎  GitHub username not set\n" -}}
# {{- end -}}

# {{- if $interactive -}}
# {{-   range $i := until 99 -}}
# {{-     $question := "❔ What is your email" -}}
# {{-     $answer := "" -}}
# {{-     if $email -}}
# {{-       $answer = promptString $question $email -}}
# {{-     else -}}
# {{-       $answer = promptString $question -}}
# {{-     end -}}
# {{-     $answer = lower $answer -}}
# {{-     if regexMatch "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$" $answer -}}
# {{-       $email = $answer -}}
# {{-       break -}}
# {{-     end -}}
# {{-     writeToStdout (printf "❌ '%s' is an invalid email\n" $answer) -}}
# {{-     if eq $i 98 -}}
# {{-       writeToStdout "❌ ERROR: maximum tries exceeded\n" -}}
# {{-       exit 1 -}}
# {{-     end -}}
# {{-   end -}}
# {{- end -}}
# {{- writeToStdout (printf "✅  Email set as '%s'\n" $email) -}}

# {{- if $interactive -}}
# {{-   range $i := until 99 -}}
# {{-     $question := "❔ What is hostname" -}}
# {{-     $answer := "" -}}
# {{-     if $hostname -}}
# {{-       $answer = promptString $question $hostname -}}
# {{-     else -}}
# {{-       $answer = promptString $question -}}
# {{-     end -}}
# {{-     if regexMatch "^[A-Za-z0-9._-]+$" $answer -}}
# {{-       $hostname = $answer -}}
# {{-       break -}}
# {{-     end -}}
# {{-     writeToStdout (printf "❌ '%s' is an invalid hostname\n" $answer) -}}
# {{-     if eq $i 98 -}}
# {{-       writeToStdout "❌ ERROR: maximum tries exceeded\n" -}}
# {{-       exit 1 -}}
# {{-     end -}}
# {{-   end -}}
# {{- end -}}
# {{- writeToStdout (printf "✅  Hostname set as '%s'\n" $hostname) -}}

# {{- writeToStdout (printf "✅  SSH algorithm set as '%s'\n" $ssh_algorithm) -}}
# {{- $ssh_keyfile := joinPath .chezmoi.homeDir (printf ".ssh/id_%s_%s" $ssh_algorithm $github_username) -}}
# {{- writeToStdout (printf "✅  SSH key filename set as '%s'\n" $ssh_keyfile) -}}
# {{- $age_keyfile := joinPath .chezmoi.homeDir (printf ".ssh/age_key_%s" $github_username) -}}
# {{- writeToStdout (printf "✅  Age key filename set as '%s'\n" $age_keyfile) -}}

# {{- if $interactive -}}
# {{-   $question := "❔ What is your GitHub Token (If not set, you will be prompted to authenticate)" -}}
# {{-   $answer := "" -}}
# {{-   if $github_token -}}
# {{-     $answer = promptString $question $github_token -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $github_token = $answer -}}
# {{- end -}}
# {{- if $github_token -}}
# {{-   writeToStdout "✅  GitHub Token set as '***'\n" -}}
# {{- else -}}
# {{-   writeToStdout "❎  GitHub Token not set\n" -}}
# {{- end -}}

# {{- if $interactive -}}
# {{-   $question := "❔ What passphrase do you want to use for your GPG key" -}}
# {{-   $answer := "" -}}
# {{-   if $gpg_passphrase -}}
# {{-     $answer = promptString $question $gpg_passphrase -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $gpg_passphrase = $answer -}}
# {{- end -}}
# {{- if $gpg_passphrase -}}
# {{-   writeToStdout "✅  GPG passphrase set as '***'\n" -}}
# {{- else -}}
# {{-   writeToStdout "❎  GPG passphrase not set\n" -}}
# {{- end -}}

# {{- if $interactive -}}
# {{-   $question := "❔ Do you want to use GPG(or SSH) to sign git commits globally" -}}
# {{-   $git_commit_gpgsign = promptBool $question $git_commit_gpgsign -}}
# {{- end -}}
# {{- if $git_commit_gpgsign -}}
# {{-   writeToStdout "✅  Git commits will be signed by GPG(or SSH)\n" -}}
# {{- else -}}
# {{-   writeToStdout "❎  Git commits will not be signed by GPG(or SSH)\n" -}}
# {{- end -}}

# {{- if and $interactive $use_dotdrop -}}
# {{-   $question := "❔ What is your dotdrop files repository URL (ex: https://github.com/entelecheia/dotdrop-files.git)" -}}
# {{-   $answer := "" -}}
# {{-   if $dotdrop_repo -}}
# {{-     $answer = promptString $question $dotdrop_repo -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $dotdrop_repo = $answer -}}
# {{-   $use_dotdrop = $answer | not | not -}}
# {{- end -}}
# {{- if $dotdrop_repo -}}
# {{-   writeToStdout (printf "✅  dotdrop files repo set as '%s'\n" $dotdrop_repo) -}}
# {{- else -}}
# {{-   writeToStdout "❎  dotdrop files repo not set\n" -}}
# {{- end -}}

# {{- if and $interactive $use_dotdrop -}}
# {{-   $question := "❔ What is your dotdrop user profile (ex: hostname)" -}}
# {{-   $answer := "" -}}
# {{-   if $dotdrop_user_profile -}}
# {{-     $answer = promptString $question $dotdrop_user_profile -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $dotdrop_user_profile = $answer -}}
# {{- end -}}
# {{- writeToStdout (printf "✅  dotdrop user profile set as '%s'\n" $dotdrop_user_profile) -}}

# {{- if $interactive -}}
# {{-   $question := "❔ What is your Docker username" -}}
# {{-   $answer := "" -}}
# {{-   if $docker_username -}}
# {{-     $answer = promptString $question $docker_username -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $docker_username = $answer -}}
# {{- end -}}
# {{- if $docker_username -}}
# {{-   writeToStdout (printf "✅  Docker username set as '%s'\n" $docker_username) -}}
# {{- else -}}
# {{-   writeToStdout "❎  Docker username not set\n" -}}
# {{- end -}}

# {{- if $interactive -}}
# {{-   $question := "❔ What is your Docker container registry (ex: ghcr.io)" -}}
# {{-   $answer := "" -}}
# {{-   if $docker_container_registry -}}
# {{-     $answer = promptString $question $docker_container_registry -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $docker_container_registry = $answer -}}
# {{- end -}}
# {{- if $docker_container_registry -}}
# {{-   writeToStdout (printf "✅  Docker container registry set as '%s'\n" $docker_container_registry) -}}
# {{- else -}}
# {{-   writeToStdout "❎  Docker container registry not set\n" -}}
# {{- end -}}

# {{- if and $interactive ($minimum | not) -}}
# {{-   $question := "❔ What is your dockerfiles repository URL (ex: https://github.com/entelecheia/dockerfiles.git)" -}}
# {{-   $answer := "" -}}
# {{-   if $dockerfiles_repo -}}
# {{-     $answer = promptString $question $dockerfiles_repo -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $dockerfiles_repo = $answer -}}
# {{- end -}}
# {{- writeToStdout (printf "✅  dockerfiles repo set as '%s'\n" $dockerfiles_repo) -}}

# {{- if $workspace_existing -}}
# {{- if $wsl -}}
# {{-   if eq $winhome_existing $winhome -}}
# {{-     $workspace_location = $workspace_existing -}}
# {{-   else -}}
# {{-     $workspace_location = $winhome -}}
# {{-   end -}}
# {{- else -}}
# {{-   $workspace_location = $workspace_existing -}}
# {{- end -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   $question := "❔ Where do you want to put your workspace" -}}
# {{-   $answer := "" -}}
# {{-   if $workspace_location -}}
# {{-     $answer = promptString $question $workspace_location -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $workspace_location = $answer -}}
# {{- end -}}
# {{- writeToStdout (printf "✅  Worksapce location set as '%s'\n" $workspace_location) -}}

# {{- $workspace_root = joinPath $workspace_location $workspace_name -}}
# {{-   writeToStdout (printf "✅  Worksapce root set as '%s'\n" $workspace_root) -}}
# {{- if $symlink_to_home -}}
# {{-   $workspace_home = joinPath .chezmoi.homeDir $workspace_name -}}
# {{- else -}}
# {{-   $workspace_home = joinPath $workspace_location $workspace_name -}}
# {{- end -}}
# {{-   writeToStdout (printf "✅  Worksapce root symlinked to '%s'\n" $workspace_home) -}}
# {{- $project_dir := joinPath $workspace_home "projects" -}}
# {{- $reference_dir := joinPath $workspace_home "references" -}}
# {{- $container_dir := joinPath $workspace_home "containers" -}}
# {{- $model_dir := joinPath $workspace_home "models" -}}
# {{- $dataset_dir := joinPath $workspace_home "datasets" -}}

# {{- if and $interactive ($minimum | not) -}}
# {{-   $question := "❔ Do you want to symlink workspace to colab default google drive directory to maintain persistence across sessions" -}}
# {{-   $symlink_colab_workspace = promptBool $question $symlink_colab_workspace -}}
# {{- end -}}
# {{- if $symlink_colab_workspace -}}
# {{-   writeToStdout "✅  Colab workspace symlinked to workspace root\n" -}}
# {{- else -}}
# {{-   writeToStdout "❎  Colab workspace not symlinked\n" -}}
# {{- end -}}

# {{- if $interactive -}}
# {{-   $question := "❔ Do you want to use lfs-folderstore for git lfs" -}}
# {{-   $use_lfs_folderstore = promptBool $question $use_lfs_folderstore -}}
# {{- end -}}
# {{- if $use_lfs_folderstore -}}
# {{-   writeToStdout "✅  lfs-folderstore for git lfs enabled\n" -}}
# {{- else -}}
# {{-   writeToStdout "❎  lfs-folderstore for git lfs disabled\n" -}}
# {{- end -}}
# {{- if and $interactive $use_lfs_folderstore -}}
# {{-   $question := "❔ Where do you want to put your lfs-folderstore" -}}
# {{-   $answer := "" -}}
# {{-   if $lfs_folderstore_dir -}}
# {{-     $answer = promptString $question $lfs_folderstore_dir -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $lfs_folderstore_dir = $answer -}}
# {{-   writeToStdout (printf "✅  lfs-folderstore location set as '%s'\n" $lfs_folderstore_dir) -}}
# {{- end -}}

# {{- if $interactive -}}
# {{-   $question := "❔ Do you want to use Codecov" -}}
# {{-   $use_codecov = promptBool $question $use_codecov -}}
# {{- end -}}
# {{- if and $use_codecov $interactive -}}
# {{-   $question := "❔ What is your Codecov api token" -}}
# {{-   $answer := "" -}}
# {{-   if $codecov_api_token -}}
# {{-     $answer = promptString $question $codecov_api_token -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $codecov_api_token = $answer -}}
# {{- end -}}
# {{- if $use_codecov -}}
# {{-   writeToStdout "✅  Codecov enabled\n" -}}
# {{-   writeToStdout "✅  Codecov API token set as '***'\n" -}}
# {{- else -}}
# {{-   writeToStdout "❎  Codecov disabled\n" -}}
# {{- end -}}

# {{- if $interactive -}}
# {{-   $question := "❔ Do you want to use Sourcegraph" -}}
# {{-   $use_sourcegraph = promptBool $question $use_sourcegraph -}}
# {{- end -}}
# {{- if and $use_sourcegraph $interactive -}}
# {{-   $question := "❔ What is your Sourcegraph access token" -}}
# {{-   $answer := "" -}}
# {{-   if $sourcegraph_access_token -}}
# {{-     $answer = promptString $question $sourcegraph_access_token -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $sourcegraph_access_token = $answer -}}
# {{- end -}}
# {{- if $use_sourcegraph -}}
# {{-   writeToStdout "✅  Sourcegraph enabled\n" -}}
# {{-   writeToStdout "✅  Sourcegraph access token set as '***'\n" -}}
# {{- else -}}
# {{-   writeToStdout "❎  Sourcegraph disabled\n" -}}
# {{- end -}}
# {{- if and $use_sourcegraph $interactive -}}
# {{-   $question := "❔ What is your Sourcegraph endpoint" -}}
# {{-   $answer := "" -}}
# {{-   if $sourcegraph_endpoint -}}
# {{-     $answer = promptString $question $sourcegraph_endpoint -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $sourcegraph_endpoint = $answer -}}
# {{-   writeToStdout (printf "✅  Sourcegraph endpoint set as '%s'\n" $sourcegraph_endpoint) -}}
# {{- end -}}

# {{- if $interactive -}}
# {{-   $question := "❔ Do you want to use WakaTime" -}}
# {{-   $use_wakatime = promptBool $question $use_wakatime -}}
# {{- end -}}
# {{- if and $use_wakatime $interactive -}}
# {{-   $question := "❔ What is your wakatime api key" -}}
# {{-   $answer := "" -}}
# {{-   if $wakatime_api_key -}}
# {{-     $answer = promptString $question $wakatime_api_key -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $wakatime_api_key = $answer -}}
# {{- end -}}
# {{- if $use_wakatime -}}
# {{-   writeToStdout "✅  WakaTime enabled\n" -}}
# {{-   writeToStdout "✅  WakaTime API key set as '***'\n" -}}
# {{- else -}}
# {{-   writeToStdout "❎  WakaTime disabled\n" -}}
# {{- end -}}

# {{- if $interactive -}}
# {{-   $question := "❔ Do you want to use OpenAI API" -}}
# {{-   $use_openai = promptBool $question $use_openai -}}
# {{- end -}}
# {{- if and $use_openai $interactive -}}
# {{-   $question := "❔ What is your openai api key" -}}
# {{-   $answer := "" -}}
# {{-   if $openai_api_key -}}
# {{-     $answer = promptString $question $openai_api_key -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $openai_api_key = $answer -}}
# {{- end -}}
# {{- if $use_openai -}}
# {{-   writeToStdout "✅  OpenAI API enabled\n" -}}
# {{-   writeToStdout "✅  OpenAI API key set as '***'\n" -}}
# {{- else -}}
# {{-   writeToStdout "❎  OpenAI API disabled\n" -}}
# {{- end -}}

# {{- if $use_cloudflared -}}
# {{-   writeToStdout "✅  cloudflared enabled\n" -}}
# {{- else -}}
# {{-   writeToStdout "❎  cloudflared disabled\n" -}}
# {{- end -}}

# {{- if $use_ngrok -}}
# {{-   writeToStdout "✅  ngrok enabled\n" -}}
# {{- else -}}
# {{-   writeToStdout "❎  ngrok disabled\n" -}}
# {{- end -}}
# {{- if and $interactive $use_ngrok -}}
# {{-   $question := "❔ What is your ngrok authtoken" -}}
# {{-   $answer := "" -}}
# {{-   if $ngrok_authtoken -}}
# {{-     $answer = promptString $question $ngrok_authtoken -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $ngrok_authtoken = $answer -}}
# {{- end -}}
# {{- if $use_ngrok -}}
# {{-   if $ngrok_authtoken -}}
# {{-     writeToStdout "✅  ngrok authtoken set as '***'\n" -}}
# {{-   else -}}
# {{-     writeToStdout "❎  ngrok authtoken not set\n" -}}
# {{-   end -}}
# {{- end -}}

# {{- if and $interactive $use_ngrok -}}
# {{-   $question := "❔ What is your ssh service port for ngrok" -}}
# {{-   $answer := "" -}}
# {{-   if $ngrok_ssh_port -}}
# {{-     $answer = promptString $question $ngrok_ssh_port -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $ngrok_ssh_port = $answer -}}
# {{- end -}}
# {{- if $use_ngrok -}}
# {{-   if $ngrok_ssh_port -}}
# {{-     writeToStdout (printf "✅  ngrok ssh port set as '%s'\n" $ngrok_ssh_port) -}}
# {{-   else -}}
# {{-     writeToStdout "❎  ngrok ssh port not set\n" -}}
# {{-   end -}}
# {{- end -}}

# {{- if $interactive -}}
# {{-   $question := "❔ What is your Doppler token" -}}
# {{-   $answer := "" -}}
# {{-   if $doppler_token -}}
# {{-     $answer = promptString $question $doppler_token -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $doppler_token = $answer -}}
# {{- end -}}
# {{- if $doppler_token -}}
# {{-   writeToStdout "✅  Doppler Token set as '***'\n" -}}
# {{- else -}}
# {{-   writeToStdout "❎  Doppler Token not set\n" -}}
# {{- end -}}

# {{- if and $interactive $use_pass -}}
# {{-   $question := "❔ What is your password store repository URL (ex: https://github.com/username/.password-store.git)" -}}
# {{-   $answer := "" -}}
# {{-   if $pass_repo -}}
# {{-     $answer = promptString $question $pass_repo -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $pass_repo = $answer -}}
# {{- end -}}
# {{- if $pass_repo -}}
# {{-   writeToStdout (printf "✅  password store repo set as '%s'\n" $pass_repo) -}}
# {{- else -}}
# {{-   writeToStdout "❎  password store repo not set\n" -}}
# {{- end -}}

# {{- if and $interactive $use_passage -}}
# {{-   $question := "❔ What is your passage repository URL (ex: https://github.com/usename/.passage.git)" -}}
# {{-   $answer := "" -}}
# {{-   if $passage_repo -}}
# {{-     $answer = promptString $question $passage_repo -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $passage_repo = $answer -}}
# {{- end -}}
# {{- if $passage_repo -}}
# {{-   writeToStdout (printf "✅  passage repo set as '%s'\n" $passage_repo) -}}
# {{- else -}}
# {{-   writeToStdout "❎  passage repo not set\n" -}}
# {{- end -}}

# {{- if $use_1password -}}
# {{-   writeToStdout "✅  1password enabled\n" -}}
# {{- else -}}
# {{-   writeToStdout "❎  1password disabled\n" -}}
# {{- end -}}

# {{- if and $interactive ($minimum | not) -}}
# {{-   $question := "❔ Do you want to use autorestic to backup your files" -}}
# {{-   $use_autorestic = promptBool $question $use_autorestic -}}
# {{- end -}}
# {{- if $use_autorestic -}}
# {{-   writeToStdout "✅  autorestic enabled\n" -}}
# {{-   writeToStdout (printf "✅  autorestic config path set as '%s'\n" $autorestic_config_file) -}}
# {{-   writeToStdout (printf "✅  autorestic location for dotfiles set as '%s'\n" $autorestic_location) -}}
# {{-   writeToStdout (printf "✅  autorestic restores dotfiles to '%s'\n" $autorestic_restore_to) -}}
# {{- else -}}
# {{-   writeToStdout "❎  autorestic disabled\n" -}}
# {{- end -}}

# {{- if and $interactive $sudoer -}}
# {{-   $question := "❔ Do you want to use visual studio code" -}}
# {{-   $use_code = promptBool $question $use_code -}}
# {{- end -}}
# {{- if $use_code -}}
# {{-   writeToStdout "✅  visual studio code enabled\n" -}}
# {{- else -}}
# {{-   writeToStdout "❎  visual studio code disabled\n" -}}
# {{- end -}}

# {{- if $interactive -}}
# {{-     $question := "❔ What version of Python do you want to use" -}}
# {{-     $answer := "" -}}
# {{-     if $python_version -}}
# {{-       $answer = promptString $question $python_version -}}
# {{-     else -}}
# {{-       $answer = promptString $question -}}
# {{-     end -}}
# {{-     $python_version = $answer -}}
# {{- end -}}
# {{- writeToStdout (printf "✅  Python version set as '%s'\n" $python_version) -}}

# {{- if $use_python_tools -}}
# {{-   writeToStdout "✅  python tools enabled\n" -}}
# {{- else -}}
# {{-   writeToStdout "❎  python tools disabled\n" -}}
# {{- end -}}

# {{- if $interactive -}}
# {{-   $question := "❔ Do you want to use rbenv" -}}
# {{-   $use_rbenv = promptBool $question $use_rbenv -}}
# {{- end -}}
# {{- if $use_rbenv -}}
# {{-   writeToStdout "✅  rbenv enabled\n" -}}
# {{- else -}}
# {{-   writeToStdout "❎  rbenv disabled\n" -}}
# {{- end -}}

# {{- if $use_microk8s -}}
# {{-   writeToStdout "✅  MicroK8s enabled\n" -}}
# {{- else -}}
# {{-   writeToStdout "❎  MicroK8s disabled\n" -}}
# {{- end -}}

# {{- if and $interactive ($minimum | not) -}}
# {{-   $question := "❔ What are your GitHub repositories to clone (input as comma separated list, ex: entelecheia/devcon,entelecheia/ekorpkit)" -}}
# {{-   $answer := "" -}}
# {{-   if $github_clones -}}
# {{-     $answer = promptString $question $github_clones -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $github_clones = $answer -}}
# {{- end -}}
# {{- if $github_clones -}}
# {{-   writeToStdout (printf "✅  GitHub repositories to clone set as '%s'\n" $github_clones) -}}
# {{- else -}}
# {{-   writeToStdout "❎  GitHub repositories to clone not set\n" -}}
# {{- end -}}

# {{- $pkgs_user := "" -}}
# {{- if $use_dotdrop -}}
# {{-   $pkgs_user = printf "%s dotdrop" $pkgs_user -}}
# {{- end -}}
# {{- if $use_code -}}
# {{-   $pkgs_user = printf "%s code code-cli" $pkgs_user -}}
# {{- end -}}
# {{- if $use_ngrok -}}
# {{-   $pkgs_user = printf "%s ngrok" $pkgs_user -}}
# {{- end -}}
# {{- if $use_cloudflared -}}
# {{-   $pkgs_user = printf "%s cloudflared" $pkgs_user -}}
# {{- end -}}
# {{- if $use_pass -}}
# {{-   $pkgs_user = printf "%s pass" $pkgs_user -}}
# {{- end -}}
# {{- if $use_passage -}}
# {{-   $pkgs_user = printf "%s passage" $pkgs_user -}}
# {{- end -}}
# {{- if $use_1password -}}
# {{-   $pkgs_user = printf "%s 1password-cli" $pkgs_user -}}
# {{- end -}}
# {{- if $use_autorestic -}}
# {{-   $pkgs_user = printf "%s restic autorestic" $pkgs_user -}}
# {{- end -}}
# {{- if $use_microk8s -}}
# {{-   $pkgs_user = printf "%s microk8s helm" $pkgs_user -}}
# {{- end -}}
# {{- if $use_doppler -}}
# {{-   $pkgs_user = printf "%s doppler" $pkgs_user -}}
# {{- end -}}
# {{- if $use_vault -}}
# {{-   $pkgs_user = printf "%s vault" $pkgs_user -}}
# {{- end -}}
# {{- if $use_python_tools -}}
# {{-   $pkgs_user = printf "%s commitizen copier mypy nox poetry poethepoet pre-commit python-semantic-release sourcery" $pkgs_user -}}
# {{- end -}}
# {{- if $use_rbenv -}}
# {{-   $pkgs_user = printf "%s rbenv" $pkgs_user -}}
# {{- end -}}
# {{- if $use_codecov -}}
# {{-   $pkgs_user = printf "%s codecov-cli" $pkgs_user -}}
# {{- end -}}
# {{- if $use_sourcegraph -}}
# {{-   $pkgs_user = printf "%s sourcegraph sourcegraph/src-cli/src-cli" $pkgs_user -}}
# {{- end -}}
# {{- if $use_wakatime -}}
# {{-   $pkgs_user = printf "%s wakatime" $pkgs_user -}}
# {{- end -}}
# {{- if $use_openai -}}
# {{-   $pkgs_user = printf "%s openai" $pkgs_user -}}
# {{- end -}}

# {{- if and $interactive ($minimum | not) -}}
# {{-   $question := "❔ What are the additional packages to install (input as space separated list, ex: git curl)" -}}
# {{-   $answer := "" -}}
# {{-   if $pkgs_user -}}
# {{-     $answer = promptString $question $pkgs_user -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $pkgs_user = $answer -}}
# {{- end -}}
# {{- $pkgs_user = trim $pkgs_user -}}
# {{- if $pkgs_user -}}
# {{-   writeToStdout (printf "✅  Additional packages to install set as \n    '%s'\n" $pkgs_user) -}}
# {{- else -}}
# {{-   writeToStdout "❎  Additional packages to install not set\n" -}}
# {{- end -}}

# {{-   writeToStdout "\n💡 Tip: you can always config your dotfiles interactively by running `dotfiles-update|dotu init`.\n" -}}

# {{- /* This retains the value passed with --source on chezmoi init, which is used in the ../install.sh script */ -}} #
sourceDir: "{{ .chezmoi.workingTree }}"

verbose: {{ $verbose | not | not }}

diff:
  exclude:
    - always
status:
  exclude:
    - always

encryption: age
age:
  identity: {{ $age_keyfile | quote }}
  recipients: ['{{- $age_recipients | replaceAllRegex "," "', '" -}}']

# {{- /* Here we "export" the variables, so we can access them outside this file */ -}} #
data:
  name: {{ $name | quote }}
  email: {{ $email | quote }}
  editor: "vi"
  system:
    auto_update: {{ $auto_update }}
    upgrade_packages: {{ $upgrade_packages }}
    verbose: {{ $verbose }}
    hostname: {{ $hostname | quote }}
    is_wsl: {{ $wsl }}
    is_devcontainer: {{ $devcontainer }}
    is_minimum: {{ $minimum }}
    is_gnome: {{ $gnome }}
    is_interactive: {{ $interactive }}
    is_sudoer: {{ $sudoer }}
    apply_rootmoi: {{ and $apply_rootmoi $sudoer }}
    uname_arch: {{ output "uname" "-m" | trim | quote }}
    cpu:
      cores: {{ $cpuCores }}
      threads: {{ $cpuThreads }}
    # {{ if $wsl }}
    winhome: {{ $winhome | quote }}
    winhome_symlink: {{ $winhome_symlink | quote }}
  # {{ end }}
  ssh:
    home: {{ $ssh_homedir | quote }}
    algorithm: {{ $ssh_algorithm | quote }}
    identity_file: {{ $ssh_keyfile | quote }}
    authorized_keys: "authorized_keys"
  age:
    identity_file: {{ $age_keyfile | quote }}
    authorized_age_keys: "authorized_age_keys"
  gnupg:
    home: {{ $gpg_homedir | quote }}
    key_id_file: {{ $gpg_key_id_file | quote }}
    key_id: {{ $gpg_key_id | quote }}
    passphrase: {{ $gpg_passphrase | quote }}
    gitsign: {{ $git_commit_gpgsign }}
  git:
    gpgsign: {{ $git_commit_gpgsign }}
    gpg_format: ssh
    ssh_allowed_signers: "allowed_signers"
  github:
    username: {{ $github_username | quote }}
    token: {{ $github_token | quote }}
    clones: {{ $github_clones | quote }}
  dotdrop:
    enabled: {{ $use_dotdrop }}
    repo: {{ $dotdrop_repo | quote }}
    config_dir: {{ $dotdrop_config_dir | quote }}
    config_file: {{ $dotdrop_config_file | quote }}
    root_config_file: {{ $dotdrop_root_config_file | quote }}
    user_profile: {{ $dotdrop_user_profile | quote }}
    root_profile: "root"
  docker:
    repo: {{ $dockerfiles_repo | quote }}
    share_dir: {{ $dockerfiles_share_dir | quote }}
    global_env_filename: {{ $docker_global_env_filename | quote }}
    secret_env_filename: {{ $docker_secret_env_filename | quote }}
    username: {{ $docker_username | quote }}
    container_registry: {{ $docker_container_registry | quote }}
  pass:
    enabled: {{ $use_pass }}
    store_dir: {{ $pass_store_dir | quote }}
    repo: {{ $pass_repo | quote }}
  passage:
    enabled: {{ $use_passage }}
    store_dir: {{ $passage_store_dir | quote }}
    repo: {{ $passage_repo | quote }}
    share_dir: {{ $passage_share_dir | quote }}
    share_repo: "https://github.com/FiloSottile/passage.git"
  doppler:
    enabled: {{ $use_doppler }}
    token: {{ $doppler_token | quote }}
  code:
    enabled: {{ $use_code }}
  autorestic:
    enabled: {{ $use_autorestic }}
    config_file: {{ $autorestic_config_file | quote }}
    location: {{ $autorestic_location | quote }}
    backup_dotfiles: {{ $autorestic_backup_dotfiles }}
    restore_dotfiles: {{ $autorestic_restore_dotfiles }}
    restore_to: {{ $autorestic_restore_to | quote }}
  microk8s:
    enabled: {{ $use_microk8s }}
  vault:
    enabled: {{ $use_vault }}
  op:
    enabled: {{ $use_1password }}
    account: {{ $op_account | quote }}
    vault: {{ $op_vault | quote }}
    connect_host: {{ $op_connect_host | quote }}
    connect_token: {{ $op_connect_token | quote }}
  ngrok:
    enabled: {{ $use_ngrok }}
    authtoken: {{ $ngrok_authtoken | quote }}
    config_file: {{ $ngrok_config_file | quote }}
    ssh_port: {{ $ngrok_ssh_port | quote }}
  cloudflared:
    enabled: {{ $use_cloudflared }}
    config_file: {{ $cloudflared_config_file | quote }}
    config_template: {{ $cloudflared_config_template | quote }}
    tunnel_hostname: {{ $cloudflared_tunnel_hostname | quote }}
    tunnel_name: {{ $cloudflared_tunnel_name | quote }}
    tunnel_uuid: {{ $cloudflared_tunnel_uuid | quote }}
    credentials_file: {{ $cloudflared_credentials_file | quote }}
  install_packages:
    user: {{ $pkgs_user }}
  python:
    version: {{ $python_version | quote }}
    tools_enabled: {{ $use_python_tools }}
    workon_home: {{ $python_workon_home | quote }}
  ruby:
    rbenv_enabled: {{ $use_rbenv }}
  lfs_folderstore:
    enabled: {{ $use_lfs_folderstore }}
    store_dir: {{ $lfs_folderstore_dir | quote }}
  openai:
    enabled: {{ $use_openai }}
    api_key: {{ $openai_api_key | quote }}
  wakatime:
    enabled: {{ $use_wakatime }}
    api_key: {{ $wakatime_api_key | quote }}
    zsh_project_detection: {{ $wakatime_zsh_project_detection }}
  codecov:
    enabled: {{ $use_codecov }}
    api_token: {{ $codecov_api_token | quote }}
  sourcegraph:
    enabled: {{ $use_sourcegraph }}
    access_token: {{ $sourcegraph_access_token | quote }}
    endpoint: {{ $sourcegraph_endpoint | quote }}
  workspace:
    name: {{ $workspace_name | quote }}
    location: {{ $workspace_location | quote }}
    root: {{ $workspace_root | quote }}
    home: {{ $workspace_home | quote }}
    move_existing: true
    symlink_to_home: {{ $symlink_to_home }}
    symlink_colab_workspace: {{ $symlink_colab_workspace }}
    colab_drive: "/content/drive/MyDrive"
    project_dir: {{ $project_dir | quote }}
    reference_dir: {{ $reference_dir | quote }}
    container_dir: {{ $container_dir | quote }}
    model_dir: {{ $model_dir | quote }}
    dataset_dir: {{ $dataset_dir | quote }}
  github_repos:
# {{- if $github_clones -}}
# {{- range (split "," $github_clones) }}
    - name: {{ . }}
      url: https://github.com/{{.}}.git
# {{- end -}}
# {{- end }}
