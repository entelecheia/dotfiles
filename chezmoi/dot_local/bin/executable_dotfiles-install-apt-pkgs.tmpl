#!/bin/bash
# shellcheck disable=SC1083
# {{- if and (eq .chezmoi.os "linux") .system.is_sudoer }}
# {{- template "scripts-library" }}
# {{- template "package-library" }}
log_task "Installing APT packages"

# shellcheck source=/dev/null
source "${HOME}/.config/shrc/00-dotfiles-export"
export DEBIAN_FRONTEND=noninteractive

USER=${USER-:$(whoami)}
DOTFILES_PKGS_APT=${DOTFILES_PKGS_APT:-()}
DOTFILES_PKGS_TO_INSTALL=${DOTFILES_PKGS_TO_INSTALL:-()}
DOTFILES_PKGS_UPGRADABLE=${DOTFILES_PKGS_UPGRADABLE:-()}

obsolete_packages=(
{{- range .packages }}
{{-   if and (hasKey . "apt_remove") (.apt_remove) }}
  {{ .apt_remove }}
{{-   end }}
{{- end }}
)
if [[ "${#obsolete_packages[@]}" -gt 0 ]]; then
  for package in "${obsolete_packages[@]}"; do
    if is_apt_package_installed "${package}"; then
      log_task "Removing obsolete package '${package}'"
      c sudo apt remove --yes -qq -o=Dpkg::Use-Pty=0 "${package}"
    else
      log_info "Package '${package}' is not installed"
    fi
  done
fi

wanted_packages=()
for package in "${DOTFILES_PKGS_APT[@]}"; do
  if is_item_in_array "${package}" "${DOTFILES_PKGS_TO_INSTALL[@]}"; then
    wanted_packages+=("${package}")
  fi
done
log_info "Wanted packages: ${wanted_packages[*]}"

{{- range .packages }}
PKG_NAME="{{ .name }}"
{{-   if and (hasKey . "repository_script") (.repository_script) }}
REPO_SCRIPT="{{ .repository_script }}"
SOURCE_LIST_FILE="/etc/apt/sources.list.d/{{ .source_list_file }}"
if [[ ! -f "${SOURCE_LIST_FILE}" ]] && is_item_in_array "${PKG_NAME}" "${wanted_packages[@]}"; then
  if [[ $REPO_SCRIPT == http* ]]; then
    log_task "Downloading and running repository script for '${PKG_NAME}'"
    if [ "$USER" = "root" ]; then
      c curl -sLf --retry 3 --tlsv1.2 --proto "=https" "${REPO_SCRIPT}" | bash -
    else
      c curl -sLf --retry 3 --tlsv1.2 --proto "=https" "${REPO_SCRIPT}" | sudo bash -
    fi
  else
    log_task "Running repository script for '${PKG_NAME}'"
    if [ "$USER" = "root" ]; then
      c "${REPO_SCRIPT}"
    else
      c sudo "${REPO_SCRIPT}"
    fi
  fi
fi
{{-   end }}
{{-   if and (hasKey . "keyring_file") (.keyring_file) }}
KEYRING_FILE="/usr/share/keyrings/{{ .keyring_file }}"
KEYRING_URL="{{ .keyring_url }}"
if [[ ! -f "${KEYRING_FILE}" ]] && is_item_in_array "${PKG_NAME}" "${wanted_packages[@]}"; then
  log_task "Downloading {{ .keyring_file }}"
  if [ "$USER" = "root" ]; then
    c curl -fsSL "${KEYRING_URL}" | gpg --dearmor -o "${KEYRING_FILE}"
    c chmod go+r "${KEYRING_FILE}"
  else
    c curl -fsSL "${KEYRING_URL}" | sudo gpg --dearmor -o "${KEYRING_FILE}"
    c sudo chmod go+r "${KEYRING_FILE}"
  fi
fi
{{-   end }}
{{-   if and (hasKey . "gpg_key_file") (.gpg_key_file) }}
GPG_KEY_FIE="/etc/apt/trusted.gpg.d/{{ .gpg_key_file }}"
GPG_KEY_URL="{{ .gpg_key_url }}"
if [[ ! -f "${GPG_KEY_FIE}" ]] && is_item_in_array "${PKG_NAME}" "${wanted_packages[@]}"; then
  if [ "$USER" = "root" ]; then
    c curl -s "${GPG_KEY_URL}" | tee "${GPG_KEY_FIE}" >/dev/null
  else
    c curl -s "${GPG_KEY_URL}" | sudo tee "${GPG_KEY_FIE}" >/dev/null
  fi
fi
{{-   end }}
{{-   if and (hasKey . "apt_key_url") (.apt_key_url) }}
APT_KEY_URL="{{ .apt_key_url }}"
if is_item_in_array "${PKG_NAME}" "${wanted_packages[@]}"; then
  if [ "$USER" = "root" ]; then
    c curl -sLf --retry 3 --tlsv1.2 --proto "=https" "${APT_KEY_URL}" | apt-key add -
  else
    c curl -sLf --retry 3 --tlsv1.2 --proto "=https" "${APT_KEY_URL}" | sudo apt-key add -
  fi
fi
{{-   end }}
{{-   if and (hasKey . "source_list_file") (.source_list_file) }}
SOURCE_LIST_FILE="/etc/apt/sources.list.d/{{ .source_list_file }}"
{{-   if and (hasKey . "source_list_line") (.source_list_line) }}
SOURCE_LIST_LINE="{{ .source_list_line }}"
{{-   else }}
SOURCE_LIST_LINE=""
{{-   end }}
{{-   if and (hasKey . "source_list_script") (.source_list_script) }}
SOURCE_LIST_SCRIPT="{{ .source_list_script }}"
{{-   else }}
SOURCE_LIST_SCRIPT=""
{{-   end }}
if [[ ! -f "${SOURCE_LIST_FILE}" ]] && is_item_in_array "${PKG_NAME}" "${wanted_packages[@]}"; then
  if [[ -n "${SOURCE_LIST_SCRIPT}" ]]; then
    log_task "Running {{ .source_list_file }} repository script"
    c "${SOURCE_LIST_SCRIPT}"
  elif [[ -n "${SOURCE_LIST_LINE}" ]]; then
    log_task "Adding {{ .source_list_file }} repository to APT"
    if [ "$USER" = "root" ]; then
      c echo "$SOURCE_LIST_LINE" | tee "$SOURCE_LIST_FILE"
    else
      c echo "$SOURCE_LIST_LINE" | sudo tee "$SOURCE_LIST_FILE"
    fi
  else
    log_error "No source list line or script provided for {{ .source_list_file }}"
  fi
fi
{{-   end }}
{{- end }}

missing_packages=()
upgrade_packages=()

for package in "${wanted_packages[@]}"; do
  if ! is_package_installed "${package}" && ! is_apt_package_installed "${package}"; then
    missing_packages+=("${package}")
  elif is_apt_package_installed "${package}" && is_item_in_array "${package}" "${DOTFILES_PKGS_UPGRADABLE[@]}"; then
    upgrade_packages+=("${package}")
  fi
done

if [[ ${#missing_packages[@]} -gt 0 ]] || [[ ${#upgrade_packages[@]} -gt 0 ]]; then
  # This script also gets called when running rootmoi
  if [ "$USER" = "root" ]; then
    apt_command=(apt-get)
  else
    apt_command=(sudo apt-get)
  fi

  c "${apt_command[@]}" update --yes -qq -o=Dpkg::Use-Pty=0
fi
if [[ ${#missing_packages[@]} -gt 0 ]]; then
  log_task "Installing missing packages with APT: ${missing_packages[*]}"
  c "${apt_command[@]}" install --yes -qq -o=Dpkg::Use-Pty=0 --no-install-recommends "${missing_packages[@]}"
else
  log_info "No missing packages to install with APT"
fi
if [[ ${DOTFILES_UPGRADE_PACKAGES} == "true" ]]; then
  if [[ ${#upgrade_packages[@]} -gt 0 ]]; then
    log_task "Upgrading packages with APT: ${upgrade_packages[*]}"
    c "${apt_command[@]}" install --yes -qq -o=Dpkg::Use-Pty=0 "${upgrade_packages[@]}"
  fi
fi

log_green "âœ…  APT packages installed successfully. âœ¨ ðŸŒŸ âœ¨"
# {{- else }}
log_info "Your system does not use APT"
# {{- end }}
