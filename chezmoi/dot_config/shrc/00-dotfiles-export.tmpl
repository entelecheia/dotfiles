#!/bin/bash

function ensure_path_entry() {
  local entries=("$@")

  for entry in "${entries[@]}"; do
    if [[ ":${PATH}:" != *":${entry}:"* ]] && [ -d "${entry}" ]; then
      export PATH="${entry}:${PATH}"
    fi
  done
}

# {{ if eq .chezmoi.os "darwin" }}
if [ -d "/opt/homebrew/bin" ]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
fi
# {{ else if eq .chezmoi.os "linux" }}
if [ -x /home/linuxbrew/.linuxbrew/bin/brew ]; then
  # shellcheck disable=SC2312
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
elif [ -x "${HOME}/.linuxbrew/bin/brew" ]; then
  # shellcheck disable=SC2312
  eval "$("${HOME}/.linuxbrew/bin/brew" shellenv)"
fi
# {{ end }}
# for Webi
# shellcheck disable=SC1091
# [ -s "$HOME/.config/envman/load.sh" ] && source "$HOME/.config/envman/load.sh"

ensure_path_entry "${HOME}/.local/bin" "${HOME}/bin" "${HOME}/go/bin" "${HOME}/.cargo/bin"
if [ -d "${HOME}/go/packages" ]; then
  export GOROOT="${HOME}/go"
  export GOPATH="${GOROOT}/packages"
  ensure_path_entry "${GOPATH}/bin"
fi

export DOTFILES_VERSION="{{ .DOTFILES_VERSION }}"
export DOTFILES_OS="{{ .chezmoi.os }}"
export USER_FULLNAME="{{ .name }}"
export USER_EMAIL="{{ .email }}"
export SYSTEM_HOSTNAME="{{ .system.hostname }}"
export DOTFILES_MINIMUM="{{ .system.is_minimum }}"
export DOTFILES_AUTO_UPDATE="{{ .system.auto_update }}"
export DOTFILES_UPGRADE_PACKAGES="{{ .system.upgrade_packages }}"
export DOTFILES_APPLY_ROOTMOI="{{ .system.apply_rootmoi }}"
export DOTFILES_SUDOER="{{ .system.is_sudoer }}"
export DOTFILES_VERBOSE="{{ .system.verbose }}"
export DOTFILES_USE_LFS_FOLDERSTORE="{{ .lfs_folderstore.enabled }}"
export DOTFILES_USE_AUTORESTIC="{{ .autorestic.enabled }}"
export DOTFILES_USE_DOTDROP="{{ .dotdrop.enabled }}"
export DOTFILES_USE_PASS="{{ .pass.enabled }}"
export DOTFILES_USE_PASSAGE="{{ .passage.enabled }}"
export DOTFILES_USE_CODE="{{ .code.enabled }}"
export DOTFILES_USE_PYTHON_TOOLS="{{ .python.tools_enabled }}"
export DOTFILES_USE_RBENV="{{ .ruby.rbenv_enabled }}"
export DOTFILES_USE_WAKATIME="{{ .wakatime.enabled }}"
export DOTFILES_USE_OPENAI="{{ .openai.enabled }}"
export DOTFILES_USE_1PASSWORD="{{ .op.enabled }}"
export DOTFILES_USE_VAULT="{{ .vault.enabled }}"
export DOTFILES_USE_MICROK8S="{{ .microk8s.enabled }}"
export DOTFILES_USE_NGROK="{{ .ngrok.enabled }}"
export DOTDROP_PROFILE="{{ .dotdrop.user_profile }}"
export DOTDROP_CONFIGDIR="{{ .dotdrop.config_dir }}"
export DOTDROP_CONFIG="{{ .dotdrop.config_file }}"
export GITHUB_USERNAME="{{ .github.username }}"
export WORKSPACE_LOCATION="{{ .workspace.location }}"
export WORKSPACE_ROOT="{{ .workspace.root }}"
export WORKSPACE_HOME="{{ .workspace.home }}"
export WORKSPACE_PROJECT_DIR="{{ .workspace.project_dir }}"
export GIT_WORKSPACE="${WORKSPACE_PROJECT_DIR}"
export WORKSPACE_REFERENCE_DIR="{{ .workspace.reference_dir }}"
export WORKSPACE_CONTAINER_DIR="{{ .workspace.container_dir }}"
export WORKSPACE_MODEL_DIR="{{ .workspace.model_dir }}"
export WORKSPACE_DATASET_DIR="{{ .workspace.dataset_dir }}"
export DOTFILES_PYTHON_VERSION="{{ .python.version }}"

export DOTFILES_USE_CLOUDFLARED="{{ .cloudflared.enabled }}"
export CLOUDFLARED_CONFIG="{{ .cloudflared.config_file }}"
export CLOUDFLARED_TUNNEL_UUID="{{ .cloudflared.tunnel_uuid }}"
export CLOUDFLARED_TUNNEL_NAME="{{ .cloudflared.tunnel_name }}"
export CLOUDFLARED_TUNNEL_HOSTNAME="{{ .cloudflared.tunnel_hostname }}"

export DOCKER_USERNAME="{{ .docker.username }}"
export CONTAINER_REGISTRY="{{ .docker.container_registry }}"
export DOCKERFILES_SHARE_DIR="{{ .docker.share_dir }}"
export DOCKER_GLOBAL_ENV_FILENAME="{{ .docker.global_env_filename }}"
DOCKER_GLOBAL_ENV_FILE="${DOCKERFILES_SHARE_DIR}/${DOCKER_GLOBAL_ENV_FILENAME}"
export DOCKER_GLOBAL_ENV_FILE="${DOCKER_GLOBAL_ENV_FILE}"
export DOCKER_SECRET_ENV_FILENAME="{{ .docker.secret_env_filename }}"

export CODECOV_TOKEN="{{ .codecov.api_token }}"
export WAKATIME_API_KEY="{{ .wakatime.api_key }}"
export OPENAI_API_KEY="{{ .openai.api_key }}"
export ZSH_WAKATIME_PROJECT_DETECTION="{{ .wakatime.zsh_project_detection }}"
export DOTFILES_USE_SOURCEGRAPH="{{ .sourcegraph.enabled }}"
export SRC_ACCESS_TOKEN="{{ .sourcegraph.access_token }}"
{{- if .sourcegraph.endpoint }}
export SRC_ENDPOINT="{{ .sourcegraph.endpoint }}"
{{- end }}

GITHUB_TOKEN=${GITHUB_TOKEN:-"{{ .github.token }}"}
GH_TOKEN="${GITHUB_TOKEN}"
GH_HOST_CONFIG_FILE="${HOME}/.config/gh/hosts.yml"
if [ -e "${GH_HOST_CONFIG_FILE}" ] && command -v yq >/dev/null; then
  GH_TOKEN=$(yq e '."github.com".oauth_token' "${GH_HOST_CONFIG_FILE}" || echo "")
fi
export GITHUB_TOKEN="${GITHUB_TOKEN:-${GH_TOKEN}}"
export GH_TOKEN="${GITHUB_TOKEN}"
export GITHUB_USER="${GITHUB_USERNAME}"
export GIT_COMMIT_GPGSIGN="{{ .git.gpgsign }}"

export VISUAL="{{ .editor }}"
export EDITOR="{{ .editor }}"
# {{ if .system.is_wsl }}
export BROWSER="wslview"
WINHOME="{{ .system.winhome }}"
if [[ ! -d "${WINHOME}" ]]; then
  if command -v wslpath >/dev/null; then
    if command -v wslvar >/dev/null; then
      WINHOME=$(wslpath "$(wslvar USERPROFILE)")
    else
      WINHOME=$(wslpath "$(powershell.exe -noprofile -noninteractive -command '& {(gci env:USERPROFILE).Value}')")
    fi
  else
    WINHOME="/mnt/c/Users/$(whoami)"
  fi
fi
if [[ -e "${WINHOME}" ]]; then
  export WINHOME="${WINHOME}"
  export WINHOME_SYMLINK="{{ .system.winhome_symlink }}"
fi
# {{ end }}

export SSH_HOME="{{ .ssh.home }}"
export GNUPGHOME="{{ .gnupg.home }}"
export PASSWORD_STORE_DIR="{{ .pass.store_dir }}"
export PASSAGE_DIR="{{ .passage.store_dir }}"

# gpg key
export GPG_PASSPHRASE="{{ .gnupg.passphrase }}"
GPG_KEY_ID_FILE="{{ .gnupg.key_id_file }}"
if [ -e "${GPG_KEY_ID_FILE}" ]; then
  GPG_KEY_ID=$(cat "${GPG_KEY_ID_FILE}")
  export GPG_KEY_ID="${GPG_KEY_ID}"
  export PASSWORD_STORE_KEY="${GPG_KEY_ID}"
fi
# {{ if .gnupg.gitsign }}
GPG_TTY=$(tty)
export GPG_TTY
# {{ end }}

# SSH key
SSH_PUB_KEY_FILE="{{ .ssh.identity_file }}.pub"
if [ -f "${SSH_PUB_KEY_FILE}" ]; then
    SSH_PUB_KEY=$(cat "${SSH_PUB_KEY_FILE}")
    export SSH_PUB_KEY
    export SSH_PUB_KEY_FILE
fi

# age key
AGE_KEY_FILE="{{ .age.identity_file }}"
if [ -e "${AGE_KEY_FILE}" ]; then
  export AGE_KEY_FILE="${AGE_KEY_FILE}"
  export SOPS_AGE_KEY_FILE="${AGE_KEY_FILE}"
  export PASSAGE_IDENTITIES_FILE="${AGE_KEY_FILE}"
  if command -v age-keygen >/dev/null 2>&1; then
    AGE_RECIPIENT=$(age-keygen -y "${AGE_KEY_FILE}")
    export AGE_RECIPIENT="${AGE_RECIPIENT}"
  fi
fi
AUTHORIZED_AGE_KEYS_FILE="${SSH_HOME}/{{ .age.authorized_age_keys }}"
if [[ -e "${AUTHORIZED_AGE_KEYS_FILE}" ]]; then
  AGE_RECIPIENTS="$(sed -n '/^age1/p' "${AUTHORIZED_AGE_KEYS_FILE}" | sort -u | sed 'H;1h;$!d;x;y/\n/,/')"
  export AGE_RECIPIENTS="${AGE_RECIPIENTS}"
  export SOPS_AGE_RECIPIENTS="${AGE_RECIPIENTS}"
  # replace commas with spaces from AGE_RECIPIENTS
  PASSAGE_RECIPIENTS=$(echo "${AGE_RECIPIENTS}" | tr ',' ' ')
  export PASSAGE_RECIPIENTS="${PASSAGE_RECIPIENTS}"
fi

USER_UID="$(id -u)"
USER_GID="$(id -u)"
export USER_UID
export USER_GID
export USERNAME="{{ .chezmoi.username }}"

# shellcheck disable=SC1073,SC1054,SC1050,SC1072,SC1009
{{ if (hasKey . "packages") }}
DOTFILES_PKGS_MINIMAL=(
{{- range .packages }}
{{- if and (hasKey . "scope") ( eq .scope "minimal" ) }}
  {{ .name }}
{{- end }}
{{- end }}
)
DOTFILES_PKGS_SYSTEM=(
{{- range .packages }}
{{- if and (hasKey . "scope") ( eq .scope "system" ) }}
  {{ .name }}
{{- end }}
{{- end }}
)
DOTFILES_PKGS_GUI=(
{{- range .packages }}
{{- if and (hasKey . "scope") ( eq .scope "gui" ) }}
  {{ .name }}
{{- end }}
{{- end }}
)
DOTFILES_PKGS_FULL=(
{{- range .packages }}
{{- if and (hasKey . "scope") ( eq .scope "full" ) }}
  {{ .name }}
{{- end }}
{{- end }}
)
{{- if eq .chezmoi.os "linux" }}
DOTFILES_PKGS_APT=(
{{- range .packages }}
{{- if and (hasKey . "apt") ( .apt ) }}
  {{ .name }}
{{- end }}
{{- end }}
)
DOTFILES_PKGS_SNAP=(
{{- range .packages }}
{{- if and (hasKey . "snap") ( .snap ) }}
  {{ .name }}
{{- end }}
{{- end }}
)
{{- end }}
{{- if eq .chezmoi.os "darwin" }}
DOTFILES_PKGS_BREW=(
{{- range .packages }}
{{- if and (hasKey . "brew") ( .brew ) }}
  {{ .name }}
{{- end }}
{{- end }}
)
DOTFILES_PKGS_BREWCASK=(
{{- range .packages }}
{{- if and (hasKey . "brewcask") ( .brewcask ) }}
  {{ .name }}
{{- end }}
{{- end }}
)
{{- end }}
DOTFILES_PKGS_SCRIPT=(
{{- range .packages }}
{{- if and (hasKey . "script") ( .script ) }}
  {{ .name }}
{{- end }}
{{- end }}
)
DOTFILES_PKGS_WEBI=(
{{- range .packages }}
{{- if and (hasKey . "webi") ( .webi ) }}
  {{ .name }}
{{- end }}
{{- end }}
)
DOTFILES_PKGS_GO=(
{{- range .packages }}
{{- if and (hasKey . "go") ( .go ) }}
  {{ .name }}
{{- end }}
{{- end }}
)
DOTFILES_PKGS_PIP=(
{{- range .packages }}
{{- if and (hasKey . "pip") ( .pip ) }}
  {{ .name }}
{{- end }}
{{- end }}
)
DOTFILES_PKGS_PIPX=(
{{- range .packages }}
{{- if and (hasKey . "pipx") ( .pipx ) }}
  {{ .name }}
{{- end }}
{{- end }}
)
DOTFILES_PKGS_UPGRADABLE=(
{{- range .packages }}
{{- if and (hasKey . "allow_upgrade") ( .allow_upgrade ) }}
  {{ .name }}
{{- end }}
{{- end }}
)
{{- else }}
DOTFILES_PKGS_MINIMAL=()
DOTFILES_PKGS_SYSTEM=()
DOTFILES_PKGS_GUI=()
DOTFILES_PKGS_FULL=()
{{- if eq .chezmoi.os "linux" }}
DOTFILES_PKGS_APT=()
DOTFILES_PKGS_SNAP=()
{{- end }}
{{- if eq .chezmoi.os "darwin" }}
DOTFILES_PKGS_BREW=()
DOTFILES_PKGS_BREWCASK=()
{{- end }}
DOTFILES_PKGS_SCRIPT=()
DOTFILES_PKGS_WEBI=()
DOTFILES_PKGS_GO=()
DOTFILES_PKGS_PIP=()
DOTFILES_PKGS_PIPX=()
DOTFILES_PKGS_UPGRADABLE=()
{{- end }}

# user packages
{{ if (hasKey . "install_packages") }}
DOTFILES_PKGS_USER=(
  {{ .install_packages.user }}
)
{{- else }}
DOTFILES_PKGS_USER=()
{{- end }}
{{- if and (hasKey . "python_tools") ( .code.enabled ) }}
DOTFILES_PKGS_USER+=(${DOTFILES_PKGS_PIPX[@]})
{{- end }}

# system-dependent packages
{{- if eq .chezmoi.os "linux" -}}
{{-   if .system.is_wsl -}}
DOTFILES_PKGS_SYSTEM+=(wslu)
{{-   else }}
{{-     if eq .chezmoi.osRelease.versionCodename "bionic" }}
DOTFILES_PKGS_SYSTEM+=(linux-generic-hwe-18.04)
{{-     else if eq .chezmoi.osRelease.versionCodename "focal" }}
DOTFILES_PKGS_SYSTEM+=(linux-generic-hwe-20.04)
{{-     end }}
{{   end }}
{{ end }}

# export variables
export DOTFILES_PKGS_MINIMAL
export DOTFILES_PKGS_SYSTEM
{{- if eq .chezmoi.os "linux" }}
export DOTFILES_PKGS_FULL
export DOTFILES_PKGS_APT
export DOTFILES_PKGS_SNAP
{{- end }}
{{- if eq .chezmoi.os "darwin" }}
export DOTFILES_PKGS_BREW
export DOTFILES_PKGS_BREWCASK
{{- end }}
export DOTFILES_PKGS_SCRIPT
export DOTFILES_PKGS_WEBI
export DOTFILES_PKGS_GO
export DOTFILES_PKGS_PIP
export DOTFILES_PKGS_PIPX
export DOTFILES_PKGS_UPGRADABLE
export DOTFILES_PKGS_USER

# total packages to install
DOTFILES_PKGS_TO_INSTALL=(${DOTFILES_PKGS_MINIMAL[@]})
{{- if not .system.is_devcontainer }}
DOTFILES_PKGS_TO_INSTALL+=(${DOTFILES_PKGS_GUI[@]})
{{- end }}
{{- if not .system.is_minimum }}
DOTFILES_PKGS_TO_INSTALL+=(${DOTFILES_PKGS_FULL[@]})
{{- end }}
{{- if .system.apply_rootmoi }}
DOTFILES_PKGS_TO_INSTALL+=(${DOTFILES_PKGS_SYSTEM[@]})
{{- end }}
DOTFILES_PKGS_TO_INSTALL+=(${DOTFILES_PKGS_USER[@]})
export DOTFILES_PKGS_TO_INSTALL

# Python Virtual Environment
export WORKON_HOME="{{ .python.workon_home }}"
